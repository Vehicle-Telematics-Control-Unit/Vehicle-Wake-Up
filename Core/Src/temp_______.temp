/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#define _WIZCHIP_ 5500
#include "main.h"
#include "stm32f1xx_hal.h"
#include "MQTTClient.h"

#define BUFFER_SIZE 2048
#define SOC_NUM 0

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

static unsigned char targetIP[4] = {192,168,1,90}; // set your mqtt server IP
static int targetPort = 1883;                    // mqtt server port

static unsigned char tempBuffer[BUFFER_SIZE] = {};

struct opts_struct
{
  char *clientid;
  int nodelimiter;
  char *delimiter;
  enum QoS qos;
  char *username;
  char *password;
  char *host;
  int port;
  int showtopics;
} opts;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

// @brief messageArrived callback function
void messageArrived(MessageData *md){
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
}

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
  HAL_Delay(500);
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
  HAL_Delay(500);
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
  HAL_Delay(500);

  opts.clientid = "subscriber";
  opts.nodelimiter = 0;
  opts.delimiter = "\n";
  opts.qos = QOS0;
  opts.username = "bentur";
  opts.password = "1234";
  opts.host = targetIP;
  opts.port = targetPort;
  opts.showtopics = 0;

  int rc = 0;
  unsigned char buf[100];

  uint8_t mac[] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}; // Mac address
  uint8_t ip[] = {192, 168, 1, 144};                    // IP address
  uint8_t sn[] = {255, 255, 255, 0};                    // Subnet mask
  uint8_t gw[] = {192, 168, 1, 1};                      // Gateway address

  initializeW5500(mac, ip, sn, gw); // configures the MAC address, IP address, subnet mask and gateway of the device or node.

  Network n;
  MQTTClient c;

  NewNetwork(&n, SOC_NUM);
  ConnectNetwork(&n, targetIP, targetPort);
  MQTTClientInit(&c, &n, 1000, buf, 100, tempBuffer, 2048);

  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
  data.willFlag = 0;
  data.MQTTVersion = 3;
  data.clientID.cstring = opts.clientid;
  data.username.cstring = opts.username;
  data.password.cstring = opts.password;

  data.keepAliveInterval = 60;
  data.cleansession = 1;

  rc = MQTTConnect(&c, &data);
  opts.showtopics = 1;

  rc = MQTTSubscribe(&c, "Subscribe/Topic", opts.qos, messageArrived);

  MQTTMessage message;
  char payload[30];
  int count = 0;
  message.qos = 0;
  message.retained = 0;
  message.payload = payload;
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
  HAL_Delay(500);
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
  HAL_Delay(500);
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
  HAL_Delay(500);

  /* Infinite loop */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
  /* USER CODE BEGIN WHILE */
  uint32_t tickstart = HAL_GetTick();
  uint32_t wait = 5000;
  while (1)
  {
	  if((HAL_GetTick() - tickstart) > wait)
	  {
		  count++;
		  sprintf(payload, "Publish Sensor value %d",count);
		  MQTTPublish(&c, "Publish/Topic", &message);
		  tickstart = HAL_GetTick();
	  }
      MQTTYield(&c, data.keepAliveInterval);
  }
  /* USER CODE END 3 */
}
