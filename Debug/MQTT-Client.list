
MQTT-Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006514  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006788  08006788  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08006788  08006788  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006788  08006788  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b4  200000a8  08006838  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  08006838  00020a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010db4  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003286  00000000  00000000  00030e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00034110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  000351f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197d2  00000000  00000000  000361e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012721  00000000  00000000  0004f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e89a  00000000  00000000  000620d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f096d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d4  00000000  00000000  000f09c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08006608 	.word	0x08006608

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08006608 	.word	0x08006608

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	68ba      	ldr	r2, [r7, #8]
 800016c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	601a      	str	r2, [r3, #0]
}
 8000174:	bf00      	nop
 8000176:	3714      	adds	r7, #20
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr

0800017e <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800017e:	b480      	push	{r7}
 8000180:	b083      	sub	sp, #12
 8000182:	af00      	add	r7, sp, #0
 8000184:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800018e:	4293      	cmp	r3, r2
 8000190:	d003      	beq.n	800019a <getNextPacketId+0x1c>
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	3301      	adds	r3, #1
 8000198:	e000      	b.n	800019c <getNextPacketId+0x1e>
 800019a:	2301      	movs	r3, #1
 800019c:	687a      	ldr	r2, [r7, #4]
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	681b      	ldr	r3, [r3, #0]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80001ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001b0:	b087      	sub	sp, #28
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	60f8      	str	r0, [r7, #12]
 80001b6:	60b9      	str	r1, [r7, #8]
 80001b8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	617b      	str	r3, [r7, #20]
        sent = 0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
 80001c4:	e018      	b.n	80001f8 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80001ca:	689c      	ldr	r4, [r3, #8]
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	691a      	ldr	r2, [r3, #16]
 80001d4:	693b      	ldr	r3, [r7, #16]
 80001d6:	18d6      	adds	r6, r2, r3
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f001 ff07 	bl	8001fec <TimerLeftMS>
 80001de:	4603      	mov	r3, r0
 80001e0:	68ba      	ldr	r2, [r7, #8]
 80001e2:	4631      	mov	r1, r6
 80001e4:	4628      	mov	r0, r5
 80001e6:	47a0      	blx	r4
 80001e8:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	db0e      	blt.n	800020e <sendPacket+0x60>
            break;
        sent += rc;
 80001f0:	693a      	ldr	r2, [r7, #16]
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	4413      	add	r3, r2
 80001f6:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80001f8:	693a      	ldr	r2, [r7, #16]
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	da07      	bge.n	8000210 <sendPacket+0x62>
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f001 feb7 	bl	8001f74 <TimerIsExpired>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0dc      	beq.n	80001c6 <sendPacket+0x18>
 800020c:	e000      	b.n	8000210 <sendPacket+0x62>
            break;
 800020e:	bf00      	nop
    }
    if (sent == length)
 8000210:	693a      	ldr	r2, [r7, #16]
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	429a      	cmp	r2, r3
 8000216:	d10b      	bne.n	8000230 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4619      	mov	r1, r3
 8000224:	4610      	mov	r0, r2
 8000226:	f001 fecb 	bl	8001fc0 <TimerCountdown>
        rc = SUCCESSS;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	e002      	b.n	8000236 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000230:	f04f 33ff 	mov.w	r3, #4294967295
 8000234:	617b      	str	r3, [r7, #20]
    return rc;
 8000236:	697b      	ldr	r3, [r7, #20]
}
 8000238:	4618      	mov	r0, r3
 800023a:	371c      	adds	r7, #28
 800023c:	46bd      	mov	sp, r7
 800023e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000240 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
 800024c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	68ba      	ldr	r2, [r7, #8]
 8000252:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	e009      	b.n	800026e <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	3304      	adds	r3, #4
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	4413      	add	r3, r2
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	3301      	adds	r3, #1
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	2b04      	cmp	r3, #4
 8000272:	ddf2      	ble.n	800025a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	6a3a      	ldr	r2, [r7, #32]
 8000284:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800028a:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000290:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	2200      	movs	r2, #0
 8000296:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2200      	movs	r2, #0
 800029c:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2200      	movs	r2, #0
 80002a2:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	2201      	movs	r2, #1
 80002a8:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3354      	adds	r3, #84	; 0x54
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fe53 	bl	8001f5a <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 80002b4:	bf00      	nop
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b08b      	sub	sp, #44	; 0x2c
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80002d0:	2304      	movs	r3, #4
 80002d2:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80002e0:	6a3b      	ldr	r3, [r7, #32]
 80002e2:	3301      	adds	r3, #1
 80002e4:	623b      	str	r3, [r7, #32]
 80002e6:	6a3a      	ldr	r2, [r7, #32]
 80002e8:	69fb      	ldr	r3, [r7, #28]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	dd03      	ble.n	80002f6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295
 80002f2:	61bb      	str	r3, [r7, #24]
            goto exit;
 80002f4:	e021      	b.n	800033a <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80002fa:	685c      	ldr	r4, [r3, #4]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000300:	f107 0117 	add.w	r1, r7, #23
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2201      	movs	r2, #1
 8000308:	47a0      	blx	r4
 800030a:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800030c:	69bb      	ldr	r3, [r7, #24]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d112      	bne.n	8000338 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	7dfb      	ldrb	r3, [r7, #23]
 8000318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800031c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800031e:	fb01 f303 	mul.w	r3, r1, r3
 8000322:	441a      	add	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8000328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800032a:	01db      	lsls	r3, r3, #7
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800032e:	7dfb      	ldrb	r3, [r7, #23]
 8000330:	b25b      	sxtb	r3, r3
 8000332:	2b00      	cmp	r3, #0
 8000334:	dbd1      	blt.n	80002da <decodePacket+0x1e>
exit:
 8000336:	e000      	b.n	800033a <decodePacket+0x7e>
            goto exit;
 8000338:	bf00      	nop
    return len;
 800033a:	6a3b      	ldr	r3, [r7, #32]
}
 800033c:	4618      	mov	r0, r3
 800033e:	372c      	adds	r7, #44	; 0x2c
 8000340:	46bd      	mov	sp, r7
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8000344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
 8000352:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
    int len = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000364:	685c      	ldr	r4, [r3, #4]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	695e      	ldr	r6, [r3, #20]
 800036e:	68b8      	ldr	r0, [r7, #8]
 8000370:	f001 fe3c 	bl	8001fec <TimerLeftMS>
 8000374:	4603      	mov	r3, r0
 8000376:	2201      	movs	r2, #1
 8000378:	4631      	mov	r1, r6
 800037a:	4628      	mov	r0, r5
 800037c:	47a0      	blx	r4
 800037e:	4603      	mov	r3, r0
 8000380:	2b01      	cmp	r3, #1
 8000382:	d13b      	bne.n	80003fc <readPacket+0xb8>
        goto exit;

    len = 1;
 8000384:	2301      	movs	r3, #1
 8000386:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8000388:	68b8      	ldr	r0, [r7, #8]
 800038a:	f001 fe2f 	bl	8001fec <TimerLeftMS>
 800038e:	4602      	mov	r2, r0
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	68f8      	ldr	r0, [r7, #12]
 8000398:	f7ff ff90 	bl	80002bc <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	693a      	ldr	r2, [r7, #16]
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 ff03 	bl	80011b2 <MQTTPacket_encode>
 80003ac:	4602      	mov	r2, r0
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	4413      	add	r3, r2
 80003b2:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	dd16      	ble.n	80003e8 <readPacket+0xa4>
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80003be:	685c      	ldr	r4, [r3, #4]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	695a      	ldr	r2, [r3, #20]
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	18d6      	adds	r6, r2, r3
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	68b8      	ldr	r0, [r7, #8]
 80003d2:	f001 fe0b 	bl	8001fec <TimerLeftMS>
 80003d6:	4603      	mov	r3, r0
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4631      	mov	r1, r6
 80003dc:	4628      	mov	r0, r5
 80003de:	47a0      	blx	r4
 80003e0:	4602      	mov	r2, r0
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d10b      	bne.n	8000400 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80003f0:	7d3b      	ldrb	r3, [r7, #20]
 80003f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	61fb      	str	r3, [r7, #28]
 80003fa:	e002      	b.n	8000402 <readPacket+0xbe>
        goto exit;
 80003fc:	bf00      	nop
 80003fe:	e000      	b.n	8000402 <readPacket+0xbe>
        goto exit;
 8000400:	bf00      	nop
exit:
    return rc;
 8000402:	69fb      	ldr	r3, [r7, #28]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3724      	adds	r7, #36	; 0x24
 8000408:	46bd      	mov	sp, r7
 800040a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800040c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800040c:	b480      	push	{r7}
 800040e:	b087      	sub	sp, #28
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	461a      	mov	r2, r3
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	4413      	add	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
 800042c:	e039      	b.n	80004a2 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b2f      	cmp	r3, #47	; 0x2f
 8000434:	d103      	bne.n	800043e <isTopicMatched+0x32>
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b2f      	cmp	r3, #47	; 0x2f
 800043c:	d13a      	bne.n	80004b4 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b2b      	cmp	r3, #43	; 0x2b
 8000444:	d009      	beq.n	800045a <isTopicMatched+0x4e>
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b23      	cmp	r3, #35	; 0x23
 800044c:	d005      	beq.n	800045a <isTopicMatched+0x4e>
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	429a      	cmp	r2, r3
 8000458:	d12e      	bne.n	80004b8 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b2b      	cmp	r3, #43	; 0x2b
 8000460:	d112      	bne.n	8000488 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	3301      	adds	r3, #1
 8000466:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8000468:	e005      	b.n	8000476 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800046a:	693b      	ldr	r3, [r7, #16]
 800046c:	3301      	adds	r3, #1
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	3301      	adds	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d20b      	bcs.n	8000496 <isTopicMatched+0x8a>
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b2f      	cmp	r3, #47	; 0x2f
 8000484:	d1f1      	bne.n	800046a <isTopicMatched+0x5e>
 8000486:	e006      	b.n	8000496 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b23      	cmp	r3, #35	; 0x23
 800048e:	d102      	bne.n	8000496 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	3b01      	subs	r3, #1
 8000494:	613b      	str	r3, [r7, #16]
        curf++;
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	3301      	adds	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
        curn++;
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	3301      	adds	r3, #1
 80004a0:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d007      	beq.n	80004ba <isTopicMatched+0xae>
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d3bd      	bcc.n	800042e <isTopicMatched+0x22>
 80004b2:	e002      	b.n	80004ba <isTopicMatched+0xae>
            break;
 80004b4:	bf00      	nop
 80004b6:	e000      	b.n	80004ba <isTopicMatched+0xae>
            break;
 80004b8:	bf00      	nop
    };
    
    return (curn == curn_end) && (*curf == '\0');
 80004ba:	693a      	ldr	r2, [r7, #16]
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d105      	bne.n	80004ce <isTopicMatched+0xc2>
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d101      	bne.n	80004ce <isTopicMatched+0xc2>
 80004ca:	2301      	movs	r3, #1
 80004cc:	e000      	b.n	80004d0 <isTopicMatched+0xc4>
 80004ce:	2300      	movs	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	371c      	adds	r7, #28
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80004ee:	2300      	movs	r3, #0
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
 80004f2:	e03f      	b.n	8000574 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f8:	3304      	adds	r3, #4
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	4413      	add	r3, r2
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d034      	beq.n	800056e <deliverMessage+0x92>
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	3304      	adds	r3, #4
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	4413      	add	r3, r2
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4619      	mov	r1, r3
 8000512:	68b8      	ldr	r0, [r7, #8]
 8000514:	f001 f818 	bl	8001548 <MQTTPacket_equals>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10c      	bne.n	8000538 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	3304      	adds	r3, #4
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	4413      	add	r3, r2
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	68b9      	ldr	r1, [r7, #8]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff6d 	bl	800040c <isTopicMatched>
 8000532:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8000534:	2b00      	cmp	r3, #0
 8000536:	d01a      	beq.n	800056e <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053c:	3304      	adds	r3, #4
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	4413      	add	r3, r2
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d012      	beq.n	800056e <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	68b9      	ldr	r1, [r7, #8]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fe03 	bl	800015c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055a:	3304      	adds	r3, #4
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	4413      	add	r3, r2
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	f107 0218 	add.w	r2, r7, #24
 8000566:	4610      	mov	r0, r2
 8000568:	4798      	blx	r3
                rc = SUCCESSS;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3301      	adds	r3, #1
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	2b04      	cmp	r3, #4
 8000578:	ddbc      	ble.n	80004f4 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
 800057a:	6a3b      	ldr	r3, [r7, #32]
 800057c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000580:	d112      	bne.n	80005a8 <deliverMessage+0xcc>
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00e      	beq.n	80005a8 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	68b9      	ldr	r1, [r7, #8]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fde2 	bl	800015c <NewMessageData>
        c->defaultMessageHandler(&md);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059c:	f107 0210 	add.w	r2, r7, #16
 80005a0:	4610      	mov	r0, r2
 80005a2:	4798      	blx	r3
        rc = SUCCESSS;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
 80005a8:	6a3b      	ldr	r3, [r7, #32]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3728      	adds	r7, #40	; 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <keepalive>:


int keepalive(MQTTClient* c)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b086      	sub	sp, #24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <keepalive+0x1c>
    {
        rc = SUCCESSS;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
        goto exit;
 80005cc:	e033      	b.n	8000636 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3354      	adds	r3, #84	; 0x54
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fcce 	bl	8001f74 <TimerIsExpired>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d02a      	beq.n	8000634 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7f1b      	ldrb	r3, [r3, #28]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d126      	bne.n	8000634 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fcb5 	bl	8001f5a <TimerInit>
            TimerCountdownMS(&timer, 1000);
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fccf 	bl	8001f9c <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	691a      	ldr	r2, [r3, #16]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	4619      	mov	r1, r3
 8000608:	4610      	mov	r0, r2
 800060a:	f000 fd06 	bl	800101a <MQTTSerialize_pingreq>
 800060e:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b00      	cmp	r3, #0
 8000614:	dd0f      	ble.n	8000636 <keepalive+0x84>
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	461a      	mov	r2, r3
 800061c:	6939      	ldr	r1, [r7, #16]
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff fdc5 	bl	80001ae <sendPacket>
 8000624:	6178      	str	r0, [r7, #20]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d104      	bne.n	8000636 <keepalive+0x84>
                c->ping_outstanding = 1;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	771a      	strb	r2, [r3, #28]
 8000632:	e000      	b.n	8000636 <keepalive+0x84>
        }
    }

exit:
 8000634:	bf00      	nop
    return rc;
 8000636:	697b      	ldr	r3, [r7, #20]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b095      	sub	sp, #84	; 0x54
 8000644:	af06      	add	r7, sp, #24
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff fe79 	bl	8000344 <readPacket>
 8000652:	4603      	mov	r3, r0
 8000654:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    int len = 0,
 8000656:	2300      	movs	r3, #0
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 800065a:	2300      	movs	r3, #0
 800065c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 800065e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000660:	3b02      	subs	r3, #2
 8000662:	2b0b      	cmp	r3, #11
 8000664:	f200 80c0 	bhi.w	80007e8 <cycle+0x1a8>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <cycle+0x30>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080007e9 	.word	0x080007e9
 8000674:	080006a1 	.word	0x080006a1
 8000678:	080007e9 	.word	0x080007e9
 800067c:	08000769 	.word	0x08000769
 8000680:	080007e9 	.word	0x080007e9
 8000684:	080007e9 	.word	0x080007e9
 8000688:	080007e9 	.word	0x080007e9
 800068c:	080007e9 	.word	0x080007e9
 8000690:	080007e9 	.word	0x080007e9
 8000694:	080007e9 	.word	0x080007e9
 8000698:	080007e9 	.word	0x080007e9
 800069c:	080007db 	.word	0x080007db
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80006a8:	4616      	mov	r6, r2
 80006aa:	f107 0210 	add.w	r2, r7, #16
 80006ae:	1d15      	adds	r5, r2, #4
 80006b0:	f107 0210 	add.w	r2, r7, #16
 80006b4:	1c54      	adds	r4, r2, #1
 80006b6:	f107 010c 	add.w	r1, r7, #12
 80006ba:	f107 0210 	add.w	r2, r7, #16
 80006be:	1c90      	adds	r0, r2, #2
 80006c0:	9604      	str	r6, [sp, #16]
 80006c2:	9303      	str	r3, [sp, #12]
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	330c      	adds	r3, #12
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	3308      	adds	r3, #8
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	462b      	mov	r3, r5
 80006dc:	4622      	mov	r2, r4
 80006de:	f000 fcab 	bl	8001038 <MQTTDeserialize_publish>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	f040 8083 	bne.w	80007f0 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80006f0:	f107 0210 	add.w	r2, r7, #16
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff feee 	bl	80004dc <deliverMessage>
            if (msg.qos != QOS0)
 8000700:	7c3b      	ldrb	r3, [r7, #16]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d06d      	beq.n	80007e2 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8000706:	7c3b      	ldrb	r3, [r7, #16]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d10c      	bne.n	8000726 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6918      	ldr	r0, [r3, #16]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	4619      	mov	r1, r3
 8000716:	8abb      	ldrh	r3, [r7, #20]
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	2204      	movs	r2, #4
 800071e:	f000 ffe0 	bl	80016e2 <MQTTSerialize_ack>
 8000722:	6378      	str	r0, [r7, #52]	; 0x34
 8000724:	e00e      	b.n	8000744 <cycle+0x104>
                else if (msg.qos == QOS2)
 8000726:	7c3b      	ldrb	r3, [r7, #16]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d10b      	bne.n	8000744 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6918      	ldr	r0, [r3, #16]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	4619      	mov	r1, r3
 8000736:	8abb      	ldrh	r3, [r7, #20]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	2205      	movs	r2, #5
 800073e:	f000 ffd0 	bl	80016e2 <MQTTSerialize_ack>
 8000742:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8000744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000746:	2b00      	cmp	r3, #0
 8000748:	dc03      	bgt.n	8000752 <cycle+0x112>
                    rc = FAILURE;
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
 8000750:	e005      	b.n	800075e <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fd29 	bl	80001ae <sendPacket>
 800075c:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d13d      	bne.n	80007e2 <cycle+0x1a2>
                    goto exit; // there was a problem
 8000766:	e044      	b.n	80007f2 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	695c      	ldr	r4, [r3, #20]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	f107 020a 	add.w	r2, r7, #10
 8000774:	f107 0109 	add.w	r1, r7, #9
 8000778:	f107 0008 	add.w	r0, r7, #8
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	4623      	mov	r3, r4
 8000780:	f000 fccc 	bl	800111c <MQTTDeserialize_ack>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d003      	beq.n	8000792 <cycle+0x152>
                rc = FAILURE;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
 8000790:	e01e      	b.n	80007d0 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6918      	ldr	r0, [r3, #16]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	4619      	mov	r1, r3
 800079c:	897b      	ldrh	r3, [r7, #10]
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2206      	movs	r2, #6
 80007a4:	f000 ff9d 	bl	80016e2 <MQTTSerialize_ack>
 80007a8:	6378      	str	r0, [r7, #52]	; 0x34
 80007aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dc03      	bgt.n	80007b8 <cycle+0x178>
                rc = FAILURE;
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
 80007b6:	e00b      	b.n	80007d0 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fcf6 	bl	80001ae <sendPacket>
 80007c2:	6338      	str	r0, [r7, #48]	; 0x30
 80007c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <cycle+0x190>
                rc = FAILURE; // there was a problem
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 80007d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d6:	d106      	bne.n	80007e6 <cycle+0x1a6>
                goto exit; // there was a problem
 80007d8:	e00b      	b.n	80007f2 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	771a      	strb	r2, [r3, #28]
            break;
 80007e0:	e002      	b.n	80007e8 <cycle+0x1a8>
            break;
 80007e2:	bf00      	nop
 80007e4:	e000      	b.n	80007e8 <cycle+0x1a8>
            break;
 80007e6:	bf00      	nop
    }
    keepalive(c);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fee2 	bl	80005b2 <keepalive>
 80007ee:	e000      	b.n	80007f2 <cycle+0x1b2>
                goto exit;
 80007f0:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 80007f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <cycle+0x1bc>
        rc = packet_type;
 80007f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 80007fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80007fe:	4618      	mov	r0, r3
 8000800:	373c      	adds	r7, #60	; 0x3c
 8000802:	46bd      	mov	sp, r7
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000806:	bf00      	nop

08000808 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fb9d 	bl	8001f5a <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fbb7 	bl	8001f9c <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff03 	bl	8000640 <cycle>
 800083a:	4603      	mov	r3, r0
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000840:	d102      	bne.n	8000848 <MQTTYield+0x40>
    {
        rc = FAILURE;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	617b      	str	r3, [r7, #20]
    }
        
    return rc;
 8000848:	697b      	ldr	r3, [r7, #20]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f001 fb85 	bl	8001f74 <TimerIsExpired>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d109      	bne.n	8000884 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff fee4 	bl	8000640 <cycle>
 8000878:	6178      	str	r0, [r7, #20]
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	429a      	cmp	r2, r3
 8000880:	d1f0      	bne.n	8000864 <waitfor+0x12>
 8000882:	e000      	b.n	8000886 <waitfor+0x34>
            break; // we timed out
 8000884:	bf00      	nop
    
    return rc;
 8000886:	697b      	ldr	r3, [r7, #20]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09e      	sub	sp, #120	; 0x78
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 80008a0:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <MQTTConnect+0x108>)
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4611      	mov	r1, r2
 80008a8:	2258      	movs	r2, #88	; 0x58
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fa16 	bl	8005cdc <memcpy>
    int len = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a1b      	ldr	r3, [r3, #32]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d15d      	bne.n	8000978 <MQTTConnect+0xe8>
		goto exit;
    
    TimerInit(&connect_timer);
 80008bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fb4a 	bl	8001f5a <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fb63 	bl	8001f9c <TimerCountdownMS>

    if (options == 0)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	8b1b      	ldrh	r3, [r3, #24]
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4610      	mov	r0, r2
 80008fa:	f001 fb61 	bl	8001fc0 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6918      	ldr	r0, [r3, #16]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f000 fa0d 	bl	8000d28 <MQTTSerialize_connect>
 800090e:	6738      	str	r0, [r7, #112]	; 0x70
 8000910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000912:	2b00      	cmp	r3, #0
 8000914:	dd32      	ble.n	800097c <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8000916:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800091a:	461a      	mov	r2, r3
 800091c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fc45 	bl	80001ae <sendPacket>
 8000924:	6778      	str	r0, [r7, #116]	; 0x74
 8000926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000928:	2b00      	cmp	r3, #0
 800092a:	d129      	bne.n	8000980 <MQTTConnect+0xf0>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800092c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000930:	461a      	mov	r2, r3
 8000932:	2102      	movs	r1, #2
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff8c 	bl	8000852 <waitfor>
 800093a:	4603      	mov	r3, r0
 800093c:	2b02      	cmp	r3, #2
 800093e:	d117      	bne.n	8000970 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8000940:	23ff      	movs	r3, #255	; 0xff
 8000942:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	f107 010f 	add.w	r1, r7, #15
 8000954:	f107 000e 	add.w	r0, r7, #14
 8000958:	f000 fad2 	bl	8000f00 <MQTTDeserialize_connack>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d102      	bne.n	8000968 <MQTTConnect+0xd8>
            rc = connack_rc;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	677b      	str	r3, [r7, #116]	; 0x74
 8000966:	e00c      	b.n	8000982 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	677b      	str	r3, [r7, #116]	; 0x74
 800096e:	e008      	b.n	8000982 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	677b      	str	r3, [r7, #116]	; 0x74
 8000976:	e004      	b.n	8000982 <MQTTConnect+0xf2>
		goto exit;
 8000978:	bf00      	nop
 800097a:	e002      	b.n	8000982 <MQTTConnect+0xf2>
        goto exit;
 800097c:	bf00      	nop
 800097e:	e000      	b.n	8000982 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8000980:	bf00      	nop
    
exit:
    if (rc == SUCCESSS)
 8000982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <MQTTConnect+0xfe>
        c->isconnected = 1;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2201      	movs	r2, #1
 800098c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800098e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8000990:	4618      	mov	r0, r3
 8000992:	3778      	adds	r7, #120	; 0x78
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08006620 	.word	0x08006620

0800099c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af04      	add	r7, sp, #16
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;  
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	623b      	str	r3, [r7, #32]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6a1b      	ldr	r3, [r3, #32]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8082 	beq.w	8000ad4 <MQTTSubscribe+0x138>
		goto exit;

    TimerInit(&timer);
 80009d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fac0 	bl	8001f5a <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fad9 	bl	8001f9c <TimerCountdownMS>
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	691c      	ldr	r4, [r3, #16]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	461d      	mov	r5, r3
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fbc2 	bl	800017e <getNextPacketId>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4629      	mov	r1, r5
 8000a12:	4620      	mov	r0, r4
 8000a14:	f000 fee1 	bl	80017da <MQTTSerialize_subscribe>
 8000a18:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	dd5b      	ble.n	8000ad8 <MQTTSubscribe+0x13c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8000a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a24:	461a      	mov	r2, r3
 8000a26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f7ff fbc0 	bl	80001ae <sendPacket>
 8000a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d152      	bne.n	8000adc <MQTTSubscribe+0x140>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
 8000a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2109      	movs	r1, #9
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff ff07 	bl	8000852 <waitfor>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b09      	cmp	r3, #9
 8000a48:	d140      	bne.n	8000acc <MQTTSubscribe+0x130>
    {
        int count = 0, grantedQoS = -1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	68d2      	ldr	r2, [r2, #12]
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	f107 0118 	add.w	r1, r7, #24
 8000a62:	f107 021c 	add.w	r2, r7, #28
 8000a66:	f107 0016 	add.w	r0, r7, #22
 8000a6a:	9401      	str	r4, [sp, #4]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	2101      	movs	r1, #1
 8000a72:	f000 ff2e 	bl	80018d2 <MQTTDeserialize_suback>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d101      	bne.n	8000a80 <MQTTSubscribe+0xe4>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8000a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a82:	2b80      	cmp	r3, #128	; 0x80
 8000a84:	d02b      	beq.n	8000ade <MQTTSubscribe+0x142>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000a86:	2300      	movs	r3, #0
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a8a:	e01b      	b.n	8000ac4 <MQTTSubscribe+0x128>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a90:	3304      	adds	r3, #4
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d110      	bne.n	8000abe <MQTTSubscribe+0x122>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aae:	3304      	adds	r3, #4
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8000abc:	e00f      	b.n	8000ade <MQTTSubscribe+0x142>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	dde0      	ble.n	8000a8c <MQTTSubscribe+0xf0>
 8000aca:	e008      	b.n	8000ade <MQTTSubscribe+0x142>
                }
            }
        }
    }
    else 
        rc = FAILURE;
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ad2:	e004      	b.n	8000ade <MQTTSubscribe+0x142>
		goto exit;
 8000ad4:	bf00      	nop
 8000ad6:	e002      	b.n	8000ade <MQTTSubscribe+0x142>
        goto exit;
 8000ad8:	bf00      	nop
 8000ada:	e000      	b.n	8000ade <MQTTSubscribe+0x142>
        goto exit;             // there was a problem
 8000adc:	bf00      	nop
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8000ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3740      	adds	r7, #64	; 0x40
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bdb0      	pop	{r4, r5, r7, pc}

08000ae8 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	b097      	sub	sp, #92	; 0x5c
 8000aec:	af08      	add	r7, sp, #32
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6a1b      	ldr	r3, [r3, #32]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 809b 	beq.w	8000c4e <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 8000b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fa1c 	bl	8001f5a <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fa35 	bl	8001f9c <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d003      	beq.n	8000b42 <MQTTPublish+0x5a>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d106      	bne.n	8000b50 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff fb1b 	bl	800017e <getNextPacketId>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	469c      	mov	ip, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	469e      	mov	lr, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	785d      	ldrb	r5, [r3, #1]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
 8000b72:	9206      	str	r2, [sp, #24]
 8000b74:	9305      	str	r3, [sp, #20]
 8000b76:	ac02      	add	r4, sp, #8
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b84:	9601      	str	r6, [sp, #4]
 8000b86:	9500      	str	r5, [sp, #0]
 8000b88:	4673      	mov	r3, lr
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4661      	mov	r1, ip
 8000b8e:	6838      	ldr	r0, [r7, #0]
 8000b90:	f000 fd31 	bl	80015f6 <MQTTSerialize_publish>
 8000b94:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8000b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dd5a      	ble.n	8000c52 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8000b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fb02 	bl	80001ae <sendPacket>
 8000baa:	6378      	str	r0, [r7, #52]	; 0x34
 8000bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d151      	bne.n	8000c56 <MQTTPublish+0x16e>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d122      	bne.n	8000c00 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fe45 	bl	8000852 <waitfor>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d114      	bne.n	8000bf8 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	695c      	ldr	r4, [r3, #20]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	f107 021a 	add.w	r2, r7, #26
 8000bda:	f107 0119 	add.w	r1, r7, #25
 8000bde:	f107 0018 	add.w	r0, r7, #24
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	4623      	mov	r3, r4
 8000be6:	f000 fa99 	bl	800111c <MQTTDeserialize_ack>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d035      	beq.n	8000c5c <MQTTPublish+0x174>
                rc = FAILURE;
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8000bf6:	e031      	b.n	8000c5c <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8000bfe:	e02d      	b.n	8000c5c <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d128      	bne.n	8000c5a <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8000c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2107      	movs	r1, #7
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fe1e 	bl	8000852 <waitfor>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b07      	cmp	r3, #7
 8000c1a:	d114      	bne.n	8000c46 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	695c      	ldr	r4, [r3, #20]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	f107 0216 	add.w	r2, r7, #22
 8000c28:	f107 0115 	add.w	r1, r7, #21
 8000c2c:	f107 0014 	add.w	r0, r7, #20
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	f000 fa72 	bl	800111c <MQTTDeserialize_ack>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d00e      	beq.n	8000c5c <MQTTPublish+0x174>
                rc = FAILURE;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
 8000c44:	e00a      	b.n	8000c5c <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8000c4c:	e006      	b.n	8000c5c <MQTTPublish+0x174>
		goto exit;
 8000c4e:	bf00      	nop
 8000c50:	e004      	b.n	8000c5c <MQTTPublish+0x174>
        goto exit;
 8000c52:	bf00      	nop
 8000c54:	e002      	b.n	8000c5c <MQTTPublish+0x174>
        goto exit; // there was a problem
 8000c56:	bf00      	nop
 8000c58:	e000      	b.n	8000c5c <MQTTPublish+0x174>
    }
    
exit:
 8000c5a:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8000c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	373c      	adds	r7, #60	; 0x3c
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c66 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000c66:	b590      	push	{r4, r7, lr}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7a1b      	ldrb	r3, [r3, #8]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d102      	bne.n	8000c80 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e005      	b.n	8000c8c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7a1b      	ldrb	r3, [r3, #8]
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d101      	bne.n	8000c8c <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000c88:	230a      	movs	r3, #10
 8000c8a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	330c      	adds	r3, #12
 8000c90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c94:	f000 fc3f 	bl	8001516 <MQTTstrlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7edb      	ldrb	r3, [r3, #27]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d013      	beq.n	8000cd2 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3324      	adds	r3, #36	; 0x24
 8000cae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cb2:	f000 fc30 	bl	8001516 <MQTTstrlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	1c9c      	adds	r4, r3, #2
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3330      	adds	r3, #48	; 0x30
 8000cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cc2:	f000 fc28 	bl	8001516 <MQTTstrlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4423      	add	r3, r4
 8000cca:	3302      	adds	r3, #2
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <MQTTSerialize_connectLength+0x7c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00a      	beq.n	8000cf8 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3340      	adds	r3, #64	; 0x40
 8000ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cea:	f000 fc14 	bl	8001516 <MQTTstrlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d103      	bne.n	8000d08 <MQTTSerialize_connectLength+0xa2>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00a      	beq.n	8000d1e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	334c      	adds	r3, #76	; 0x4c
 8000d0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d10:	f000 fc01 	bl	8001516 <MQTTstrlen>
 8000d14:	4603      	mov	r3, r0
 8000d16:	3302      	adds	r3, #2
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd90      	pop	{r4, r7, pc}

08000d28 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff8b 	bl	8000c66 <MQTTSerialize_connectLength>
 8000d50:	6238      	str	r0, [r7, #32]
 8000d52:	6a38      	ldr	r0, [r7, #32]
 8000d54:	f000 fa98 	bl	8001288 <MQTTPacket_len>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	da03      	bge.n	8000d68 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d60:	f06f 0301 	mvn.w	r3, #1
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000d66:	e0c2      	b.n	8000eee <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000d6c:	7e3b      	ldrb	r3, [r7, #24]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f362 1307 	bfi	r3, r2, #4, #4
 8000d74:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000d76:	7e3a      	ldrb	r2, [r7, #24]
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fb0f 	bl	80013a2 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	6a39      	ldr	r1, [r7, #32]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fa12 	bl	80011b2 <MQTTPacket_encode>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	4413      	add	r3, r2
 8000d94:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7a1b      	ldrb	r3, [r3, #8]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d10c      	bne.n	8000db8 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4955      	ldr	r1, [pc, #340]	; (8000ef8 <MQTTSerialize_connect+0x1d0>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fb38 	bl	800141a <writeCString>
		writeChar(&ptr, (char) 4);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2104      	movs	r1, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 faf6 	bl	80013a2 <writeChar>
 8000db6:	e00b      	b.n	8000dd0 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	494f      	ldr	r1, [pc, #316]	; (8000efc <MQTTSerialize_connect+0x1d4>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fb2b 	bl	800141a <writeCString>
		writeChar(&ptr, (char) 3);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2103      	movs	r1, #3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fae9 	bl	80013a2 <writeChar>
	}

	flags.all = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7e9b      	ldrb	r3, [r3, #26]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	f362 0341 	bfi	r3, r2, #1, #1
 8000de4:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7edb      	ldrb	r3, [r3, #27]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf14      	ite	ne
 8000dee:	2301      	movne	r3, #1
 8000df0:	2300      	moveq	r3, #0
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	7d3b      	ldrb	r3, [r7, #20]
 8000df6:	f362 0382 	bfi	r3, r2, #2, #1
 8000dfa:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000dfc:	7d3b      	ldrb	r3, [r7, #20]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	7d3b      	ldrb	r3, [r7, #20]
 8000e16:	f362 03c4 	bfi	r3, r2, #3, #2
 8000e1a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	7d3b      	ldrb	r3, [r7, #20]
 8000e2a:	f362 1345 	bfi	r3, r2, #5, #1
 8000e2e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <MQTTSerialize_connect+0x118>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000e40:	7d3b      	ldrb	r3, [r7, #20]
 8000e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e46:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d103      	bne.n	8000e58 <MQTTSerialize_connect+0x130>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000e58:	7d3b      	ldrb	r3, [r7, #20]
 8000e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000e60:	7d3a      	ldrb	r2, [r7, #20]
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fa9a 	bl	80013a2 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	8b1b      	ldrh	r3, [r3, #24]
 8000e72:	461a      	mov	r2, r3
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 faa5 	bl	80013ca <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f107 001c 	add.w	r0, r7, #28
 8000e86:	330c      	adds	r3, #12
 8000e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8a:	f000 fae5 	bl	8001458 <writeMQTTString>
	if (options->willFlag)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7edb      	ldrb	r3, [r3, #27]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00d      	beq.n	8000eb2 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f107 001c 	add.w	r0, r7, #28
 8000e9c:	3324      	adds	r3, #36	; 0x24
 8000e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ea0:	f000 fada 	bl	8001458 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f107 001c 	add.w	r0, r7, #28
 8000eaa:	3330      	adds	r3, #48	; 0x30
 8000eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eae:	f000 fad3 	bl	8001458 <writeMQTTString>
	}
	if (flags.bits.username)
 8000eb2:	7d3b      	ldrb	r3, [r7, #20]
 8000eb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f107 001c 	add.w	r0, r7, #28
 8000ec4:	3340      	adds	r3, #64	; 0x40
 8000ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec8:	f000 fac6 	bl	8001458 <writeMQTTString>
	if (flags.bits.password)
 8000ecc:	7d3b      	ldrb	r3, [r7, #20]
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f107 001c 	add.w	r0, r7, #28
 8000ede:	334c      	adds	r3, #76	; 0x4c
 8000ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee2:	f000 fab9 	bl	8001458 <writeMQTTString>

	rc = ptr - buf;
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08006678 	.word	0x08006678
 8000efc:	08006680 	.word	0x08006680

08000f00 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa28 	bl	800137c <readChar>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8000f30:	7f3b      	ldrb	r3, [r7, #28]
 8000f32:	f023 030f 	bic.w	r3, r3, #15
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b20      	cmp	r3, #32
 8000f3a:	d12e      	bne.n	8000f9a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	f107 0214 	add.w	r2, r7, #20
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f9e9 	bl	800131c <MQTTPacket_decodeBuf>
 8000f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8000f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4413      	add	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4413      	add	r3, r2
 8000f5a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6a3a      	ldr	r2, [r7, #32]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	dd1b      	ble.n	8000f9e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fa06 	bl	800137c <readChar>
 8000f70:	4603      	mov	r3, r0
 8000f72:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8000f74:	7c3b      	ldrb	r3, [r7, #16]
 8000f76:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f9f8 	bl	800137c <readChar>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
 8000f98:	e002      	b.n	8000fa0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8000f9a:	bf00      	nop
 8000f9c:	e000      	b.n	8000fa0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8000f9e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b088      	sub	sp, #32
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	dc03      	bgt.n	8000fd4 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000fcc:	f06f 0301 	mvn.w	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000fd2:	e01d      	b.n	8001010 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	7e3b      	ldrb	r3, [r7, #24]
 8000fe2:	f362 1307 	bfi	r3, r2, #4, #4
 8000fe6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000fe8:	7e3a      	ldrb	r2, [r7, #24]
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f9d6 	bl	80013a2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f8d9 	bl	80011b2 <MQTTPacket_encode>
 8001000:	4602      	mov	r2, r0
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4413      	add	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001010:	69fb      	ldr	r3, [r7, #28]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8001024:	220c      	movs	r2, #12
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffbe 	bl	8000faa <MQTTSerialize_zero>
 800102e:	4603      	mov	r3, r0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800104a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f98c 	bl	800137c <readChar>
 8001064:	4603      	mov	r3, r0
 8001066:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8001068:	7f3b      	ldrb	r3, [r7, #28]
 800106a:	f023 030f 	bic.w	r3, r3, #15
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b30      	cmp	r3, #48	; 0x30
 8001072:	d14b      	bne.n	800110c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8001074:	7f3b      	ldrb	r3, [r7, #28]
 8001076:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8001082:	7f3b      	ldrb	r3, [r7, #28]
 8001084:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001090:	7f3b      	ldrb	r3, [r7, #28]
 8001092:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f107 0214 	add.w	r2, r7, #20
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f938 	bl	800131c <MQTTPacket_decodeBuf>
 80010ac:	6278      	str	r0, [r7, #36]	; 0x24
 80010ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	4413      	add	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4413      	add	r3, r2
 80010bc:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	6a3a      	ldr	r2, [r7, #32]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010c8:	f000 f9f4 	bl	80014b4 <readMQTTLenString>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d01e      	beq.n	8001110 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6a3a      	ldr	r2, [r7, #32]
 80010d6:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db19      	blt.n	8001110 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	dd08      	ble.n	80010f6 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f92d 	bl	8001348 <readInt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6a3a      	ldr	r2, [r7, #32]
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fe:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001104:	601a      	str	r2, [r3, #0]
	rc = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	e002      	b.n	8001112 <MQTTDeserialize_publish+0xda>
		goto exit;
 800110c:	bf00      	nop
 800110e:	e000      	b.n	8001112 <MQTTDeserialize_publish+0xda>
		goto exit;
 8001110:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001114:	4618      	mov	r0, r3
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f91c 	bl	800137c <readChar>
 8001144:	4603      	mov	r3, r0
 8001146:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8001148:	7f3b      	ldrb	r3, [r7, #28]
 800114a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8001156:	7f3b      	ldrb	r3, [r7, #28]
 8001158:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	f107 0214 	add.w	r2, r7, #20
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f8d5 	bl	800131c <MQTTPacket_decodeBuf>
 8001172:	6278      	str	r0, [r7, #36]	; 0x24
 8001174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4413      	add	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4413      	add	r3, r2
 8001182:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6a3a      	ldr	r2, [r7, #32]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b01      	cmp	r3, #1
 800118c:	dd0b      	ble.n	80011a6 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f8d8 	bl	8001348 <readInt>
 8001198:	4603      	mov	r3, r0
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	801a      	strh	r2, [r3, #0]

	rc = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
 80011a4:	e000      	b.n	80011a8 <MQTTDeserialize_ack+0x8c>
		goto exit;
 80011a6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	425a      	negs	r2, r3
 80011c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011cc:	bf58      	it	pl
 80011ce:	4253      	negpl	r3, r2
 80011d0:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	da00      	bge.n	80011da <MQTTPacket_encode+0x28>
 80011d8:	337f      	adds	r3, #127	; 0x7f
 80011da:	11db      	asrs	r3, r3, #7
 80011dc:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	dd03      	ble.n	80011ec <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ea:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	60fa      	str	r2, [r7, #12]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	7afa      	ldrb	r2, [r7, #11]
 80011fa:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dcde      	bgt.n	80011c0 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	3301      	adds	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b04      	cmp	r3, #4
 8001236:	dd03      	ble.n	8001240 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	60fb      	str	r3, [r7, #12]
			goto exit;
 800123e:	e01d      	b.n	800127c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8001240:	f107 020b 	add.w	r2, r7, #11
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2101      	movs	r1, #1
 8001248:	4610      	mov	r0, r2
 800124a:	4798      	blx	r3
 800124c:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d112      	bne.n	800127a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	441a      	add	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	01db      	lsls	r3, r3, #7
 800126e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	dbd6      	blt.n	8001226 <MQTTPacket_decode+0x18>
exit:
 8001278:	e000      	b.n	800127c <MQTTPacket_decode+0x6e>
			goto exit;
 800127a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800127c:	693b      	ldr	r3, [r7, #16]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b7f      	cmp	r3, #127	; 0x7f
 800129a:	dc03      	bgt.n	80012a4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	e012      	b.n	80012ca <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012aa:	da03      	bge.n	80012b4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3302      	adds	r3, #2
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	e00a      	b.n	80012ca <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <MQTTPacket_len+0x50>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	dc03      	bgt.n	80012c4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3303      	adds	r3, #3
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	e002      	b.n	80012ca <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3304      	adds	r3, #4
 80012c8:	607b      	str	r3, [r7, #4]
	return rem_len;
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	001ffffe 	.word	0x001ffffe

080012dc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e00a      	b.n	8001302 <bufchar+0x26>
		*c = *bufptr++;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <bufchar+0x3c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	4909      	ldr	r1, [pc, #36]	; (8001318 <bufchar+0x3c>)
 80012f4:	600a      	str	r2, [r1, #0]
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	dbf0      	blt.n	80012ec <bufchar+0x10>
	return count;
 800130a:	683b      	ldr	r3, [r7, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200000c4 	.word	0x200000c4

0800131c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <MQTTPacket_decodeBuf+0x24>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MQTTPacket_decodeBuf+0x28>)
 8001330:	f7ff ff6d 	bl	800120e <MQTTPacket_decode>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000c4 	.word	0x200000c4
 8001344:	080012dd 	.word	0x080012dd

08001348 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	3201      	adds	r2, #1
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	4413      	add	r3, r2
 8001364:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1c9a      	adds	r2, r3, #2
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	601a      	str	r2, [r3, #0]
	return len;
 8001370:	68bb      	ldr	r3, [r7, #8]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
	return c;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da00      	bge.n	80013dc <writeInt+0x12>
 80013da:	33ff      	adds	r3, #255	; 0xff
 80013dc:	121b      	asrs	r3, r3, #8
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	425a      	negs	r2, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	bf58      	it	pl
 80013fc:	4253      	negpl	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f7fe fe91 	bl	800014c <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800142e:	68f9      	ldr	r1, [r7, #12]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ffca 	bl	80013ca <writeInt>
	memcpy(*pptr, string, len);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fc4c 	bl	8005cdc <memcpy>
	*pptr += len;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	441a      	add	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	4638      	mov	r0, r7
 8001462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd12      	ble.n	8001492 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4619      	mov	r1, r3
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff ffaa 	bl	80013ca <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fc2c 	bl	8005cdc <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	441a      	add	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001490:	e00c      	b.n	80014ac <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff ffbc 	bl	800141a <writeCString>
}
 80014a2:	e003      	b.n	80014ac <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff ff8f 	bl	80013ca <writeInt>
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	dd1a      	ble.n	8001506 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f7ff ff39 	bl	8001348 <readInt>
 80014d6:	4602      	mov	r2, r0
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	6852      	ldr	r2, [r2, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d30c      	bcc.n	8001506 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	6852      	ldr	r2, [r2, #4]
 80014fc:	441a      	add	r2, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	601a      	str	r2, [r3, #0]
			rc = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800150c:	697b      	ldr	r3, [r7, #20]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe0c 	bl	800014c <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e001      	b.n	800153e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	617b      	str	r3, [r7, #20]
	return rc;
 800153e:	697b      	ldr	r3, [r7, #20]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
		blen = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00a      	beq.n	8001578 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fded 	bl	800014c <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e005      	b.n	8001584 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f7fe fde1 	bl	800014c <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	429a      	cmp	r2, r3
 8001594:	d10a      	bne.n	80015ac <MQTTPacket_equals+0x64>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	461a      	mov	r2, r3
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	6938      	ldr	r0, [r7, #16]
 800159e:	f004 fbd3 	bl	8005d48 <strncmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <MQTTPacket_equals+0x64>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <MQTTPacket_equals+0x66>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	4638      	mov	r0, r7
 80015c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80015c8:	463b      	mov	r3, r7
 80015ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015ce:	f7ff ffa2 	bl	8001516 <MQTTstrlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	1c9a      	adds	r2, r3, #2
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	4413      	add	r3, r2
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4413      	add	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd02      	ble.n	80015ec <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3302      	adds	r3, #2
 80015ea:	617b      	str	r3, [r7, #20]
	return len;
 80015ec:	697b      	ldr	r3, [r7, #20]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b08a      	sub	sp, #40	; 0x28
 80015fa:	af02      	add	r7, sp, #8
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8001616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800161e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7ff ffc8 	bl	80015b6 <MQTTSerialize_publishLength>
 8001626:	61b8      	str	r0, [r7, #24]
 8001628:	69b8      	ldr	r0, [r7, #24]
 800162a:	f7ff fe2d 	bl	8001288 <MQTTPacket_len>
 800162e:	4602      	mov	r2, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4293      	cmp	r3, r2
 8001634:	da03      	bge.n	800163e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001636:	f06f 0301 	mvn.w	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800163c:	e04c      	b.n	80016d8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800163e:	7c3b      	ldrb	r3, [r7, #16]
 8001640:	2203      	movs	r2, #3
 8001642:	f362 1307 	bfi	r3, r2, #4, #4
 8001646:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	7c3b      	ldrb	r3, [r7, #16]
 8001652:	f362 03c3 	bfi	r3, r2, #3, #1
 8001656:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	b2da      	uxtb	r2, r3
 8001660:	7c3b      	ldrb	r3, [r7, #16]
 8001662:	f362 0342 	bfi	r3, r2, #1, #2
 8001666:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001668:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	7c3b      	ldrb	r3, [r7, #16]
 8001674:	f362 0300 	bfi	r3, r2, #0, #1
 8001678:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800167a:	7c3a      	ldrb	r2, [r7, #16]
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe8d 	bl	80013a2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd90 	bl	80011b2 <MQTTPacket_encode>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4413      	add	r3, r2
 8001698:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800169a:	f107 0014 	add.w	r0, r7, #20
 800169e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a4:	f7ff fed8 	bl	8001458 <writeMQTTString>

	if (qos > 0)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	dd06      	ble.n	80016bc <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 80016ae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe87 	bl	80013ca <writeInt>

	memcpy(ptr, payload, payloadlen);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fb0a 	bl	8005cdc <memcpy>
	ptr += payloadlen;
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80016d8:	69fb      	ldr	r3, [r7, #28]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b088      	sub	sp, #32
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	4611      	mov	r1, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	460b      	mov	r3, r1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	4613      	mov	r3, r2
 80016f6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dc03      	bgt.n	8001712 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800170a:	f06f 0301 	mvn.w	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001710:	e037      	b.n	8001782 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7e3b      	ldrb	r3, [r7, #24]
 800171c:	f362 1307 	bfi	r3, r2, #4, #4
 8001720:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	7e3b      	ldrb	r3, [r7, #24]
 800172c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001730:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b06      	cmp	r3, #6
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	b2da      	uxtb	r2, r3
 8001744:	7e3b      	ldrb	r3, [r7, #24]
 8001746:	f362 0342 	bfi	r3, r2, #1, #2
 800174a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800174c:	7e3a      	ldrb	r2, [r7, #24]
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fe24 	bl	80013a2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2102      	movs	r1, #2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fd27 	bl	80011b2 <MQTTPacket_encode>
 8001764:	4602      	mov	r2, r0
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	4413      	add	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800176c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fe28 	bl	80013ca <writeInt>
	rc = ptr - buf;
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001782:	69fb      	ldr	r3, [r7, #28]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001796:	2302      	movs	r3, #2
 8001798:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e013      	b.n	80017c8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017b4:	f7ff feaf 	bl	8001516 <MQTTstrlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	3303      	adds	r3, #3
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbe7      	blt.n	80017a0 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b08a      	sub	sp, #40	; 0x28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	4611      	mov	r1, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	460b      	mov	r3, r1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001808:	f7ff ffc0 	bl	800178c <MQTTSerialize_subscribeLength>
 800180c:	61f8      	str	r0, [r7, #28]
 800180e:	69f8      	ldr	r0, [r7, #28]
 8001810:	f7ff fd3a 	bl	8001288 <MQTTPacket_len>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4293      	cmp	r3, r2
 800181a:	da03      	bge.n	8001824 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800181c:	f06f 0301 	mvn.w	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001822:	e051      	b.n	80018c8 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8001828:	7d3b      	ldrb	r3, [r7, #20]
 800182a:	2208      	movs	r2, #8
 800182c:	f362 1307 	bfi	r3, r2, #4, #4
 8001830:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	7d3b      	ldrb	r3, [r7, #20]
 800183c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001840:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	2201      	movs	r2, #1
 8001846:	f362 0342 	bfi	r3, r2, #1, #2
 800184a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800184c:	7d3a      	ldrb	r2, [r7, #20]
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fda4 	bl	80013a2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	69f9      	ldr	r1, [r7, #28]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fca7 	bl	80011b2 <MQTTPacket_encode>
 8001864:	4602      	mov	r2, r0
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4413      	add	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800186c:	88ba      	ldrh	r2, [r7, #4]
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fda8 	bl	80013ca <writeInt>

	for (i = 0; i < count; ++i)
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	e01b      	b.n	80018b8 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8001880:	6a3a      	ldr	r2, [r7, #32]
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	461a      	mov	r2, r3
 800188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188e:	4413      	add	r3, r2
 8001890:	f107 0018 	add.w	r0, r7, #24
 8001894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001896:	f7ff fddf 	bl	8001458 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a0:	4413      	add	r3, r2
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fd78 	bl	80013a2 <writeChar>
	for (i = 0; i < count; ++i)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	3301      	adds	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbdf      	blt.n	8001880 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b08a      	sub	sp, #40	; 0x28
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fd41 	bl	800137c <readChar>
 80018fa:	4603      	mov	r3, r0
 80018fc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80018fe:	7f3b      	ldrb	r3, [r7, #28]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b90      	cmp	r3, #144	; 0x90
 8001908:	d142      	bne.n	8001990 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f107 0214 	add.w	r2, r7, #20
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fd02 	bl	800131c <MQTTPacket_decodeBuf>
 8001918:	6278      	str	r0, [r7, #36]	; 0x24
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	4413      	add	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4413      	add	r3, r2
 8001928:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6a3a      	ldr	r2, [r7, #32]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	dd2f      	ble.n	8001994 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fd05 	bl	8001348 <readInt>
 800193e:	4603      	mov	r3, r0
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800194c:	e019      	b.n	8001982 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	da03      	bge.n	8001960 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800195e:	e01a      	b.n	8001996 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fd09 	bl	800137c <readChar>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1c59      	adds	r1, r3, #1
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6011      	str	r1, [r2, #0]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	4602      	mov	r2, r0
 8001980:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6a3a      	ldr	r2, [r7, #32]
 8001986:	429a      	cmp	r2, r3
 8001988:	d8e1      	bhi.n	800194e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	e002      	b.n	8001996 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8001990:	bf00      	nop
 8001992:	e000      	b.n	8001996 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8001994:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001998:	4618      	mov	r0, r3
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <messageArrived>:
//}

// @brief messageArrived callback function

void messageArrived(MessageData *md)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80019a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <messageArrived+0x1c>)
 80019ae:	f002 fa4c 	bl	8003e4a <HAL_GPIO_TogglePin>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40010800 	.word	0x40010800

080019c0 <configureMQttClient>:

void configureMQttClient()
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  opts.clientid = "subscriber";
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <configureMQttClient+0x38>)
 80019c6:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <configureMQttClient+0x3c>)
 80019c8:	601a      	str	r2, [r3, #0]
  opts.nodelimiter = 0;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <configureMQttClient+0x38>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  opts.delimiter = "\n";
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <configureMQttClient+0x38>)
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <configureMQttClient+0x40>)
 80019d4:	609a      	str	r2, [r3, #8]
  opts.qos = QOS0;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <configureMQttClient+0x38>)
 80019d8:	2200      	movs	r2, #0
 80019da:	731a      	strb	r2, [r3, #12]
//  opts.username = "bentur";
//  opts.password = "1234";
  opts.host = targetIP;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <configureMQttClient+0x38>)
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <configureMQttClient+0x44>)
 80019e0:	619a      	str	r2, [r3, #24]
  opts.port = targetPort;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <configureMQttClient+0x48>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <configureMQttClient+0x38>)
 80019e8:	61d3      	str	r3, [r2, #28]
  opts.showtopics = 0;
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <configureMQttClient+0x38>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  // opts.showtopics = 1;
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	2000099c 	.word	0x2000099c
 80019fc:	08006688 	.word	0x08006688
 8001a00:	08006694 	.word	0x08006694
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)//if time 0.3 make interrupt
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10b      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x2a>
  {

	  HAL_TIM_Base_Stop_IT(&htim3);
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a20:	f003 fd50 	bl	80054c4 <HAL_TIM_Base_Stop_IT>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a2c:	f002 f9f5 	bl	8003e1a <HAL_GPIO_WritePin>
	  lock=0;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
  }
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40000400 	.word	0x40000400
 8001a44:	20000920 	.word	0x20000920
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	20000968 	.word	0x20000968

08001a50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
	 uint8_t pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // Replace GPIOA and GPIO_PIN_0 accordingly
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	480f      	ldr	r0, [pc, #60]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a5e:	f002 f9c5 	bl	8003dec <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
	//lock is used to prevent bouncing in situations where two falling edges occur in close time
	//so if two edges comes in close time after the first one lock will be one for 0.3 second->(3000*7200)/(72*10^6)

	  if(lock==0)
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d113      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x46>
		{
		  HAL_TIM_Base_Start_IT(&htim3);
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a70:	f003 fcd6 	bl	8005420 <HAL_TIM_Base_Start_IT>
		  				lock=1;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
		    if (pinState == GPIO_PIN_SET)
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d009      	beq.n	8001a94 <HAL_GPIO_EXTI_Callback+0x44>
		    {
		    	return;
		    }
		    else
		    {
				flag=1;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a8e:	f002 f9c4 	bl	8003e1a <HAL_GPIO_WritePin>
 8001a92:	e000      	b.n	8001a96 <HAL_GPIO_EXTI_Callback+0x46>
		    	return;
 8001a94:	bf00      	nop

		    }
		}


}
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	20000968 	.word	0x20000968
 8001aa4:	20000920 	.word	0x20000920
 8001aa8:	20000969 	.word	0x20000969
 8001aac:	40011000 	.word	0x40011000

08001ab0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0be      	sub	sp, #248	; 0xf8
 8001ab4:	af04      	add	r7, sp, #16
  HAL_Init();
 8001ab6:	f001 fe09 	bl	80036cc <HAL_Init>
  SystemClock_Config();
 8001aba:	f000 f8c9 	bl	8001c50 <SystemClock_Config>
  MX_GPIO_Init();
 8001abe:	f000 f99b 	bl	8001df8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001ac2:	f000 f90b 	bl	8001cdc <MX_SPI1_Init>

  MX_TIM3_Init();
 8001ac6:	f000 f93f 	bl	8001d48 <MX_TIM3_Init>
  // opts.username = "bentur";
  // opts.password = "1234";
  // opts.host = targetIP;
  // opts.port = targetPort;
  // opts.showtopics = 0;
  configureMQttClient();
 8001aca:	f7ff ff79 	bl	80019c0 <configureMQttClient>

  uint8_t mac[] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}; // Mac address
 8001ace:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <main+0x158>)
 8001ad0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad8:	6018      	str	r0, [r3, #0]
 8001ada:	3304      	adds	r3, #4
 8001adc:	8019      	strh	r1, [r3, #0]
  uint8_t ip[] = {192, 168, 1, 144};                    // IP address
 8001ade:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <main+0x15c>)
 8001ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint8_t sn[] = {255, 255, 255, 0};                    // Subnet mask
 8001ae4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t gw[] = {192, 168, 1, 1};                      // Gateway address
 8001aec:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <main+0x160>)
 8001aee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

  initializeW5500(mac, ip, sn, gw); // configures the MAC address, IP address, subnet mask and gateway of the device or node.
 8001af2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001af6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001afa:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001afe:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001b02:	f001 fbc3 	bl	800328c <initializeW5500>

  int rc = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  unsigned char buf[100];

  Network n;

  NewNetwork(&n, SOC_NUM);
 8001b0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fa7e 	bl	8002014 <NewNetwork>
  ConnectNetwork(&n, targetIP, targetPort);
 8001b18:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <main+0x164>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b20:	493d      	ldr	r1, [pc, #244]	; (8001c18 <main+0x168>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fae8 	bl	80020f8 <ConnectNetwork>
  MQTTClientInit(&mqttClient, &n, 1000, buf, 100, tempBuffer, 2048);
 8001b28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b2c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b34:	9202      	str	r2, [sp, #8]
 8001b36:	4a39      	ldr	r2, [pc, #228]	; (8001c1c <main+0x16c>)
 8001b38:	9201      	str	r2, [sp, #4]
 8001b3a:	2264      	movs	r2, #100	; 0x64
 8001b3c:	9200      	str	r2, [sp, #0]
 8001b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b42:	4837      	ldr	r0, [pc, #220]	; (8001c20 <main+0x170>)
 8001b44:	f7fe fb7c 	bl	8000240 <MQTTClientInit>

  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8001b48:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <main+0x174>)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	2258      	movs	r2, #88	; 0x58
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 f8c3 	bl	8005cdc <memcpy>
  data.willFlag = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	77fb      	strb	r3, [r7, #31]
  data.MQTTVersion = 3;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	733b      	strb	r3, [r7, #12]
  data.clientID.cstring = opts.clientid;
 8001b5e:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <main+0x178>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	613b      	str	r3, [r7, #16]
  data.username.cstring = opts.username;
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <main+0x178>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  data.password.cstring = opts.password;
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <main+0x178>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	653b      	str	r3, [r7, #80]	; 0x50
  data.keepAliveInterval = 60;
 8001b70:	233c      	movs	r3, #60	; 0x3c
 8001b72:	83bb      	strh	r3, [r7, #28]
  data.cleansession = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	77bb      	strb	r3, [r7, #30]

  message.qos = 0;
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <main+0x17c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
  message.retained = 0;
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <main+0x17c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	705a      	strb	r2, [r3, #1]
  message.payload = payload;
 8001b84:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <main+0x17c>)
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <main+0x180>)
 8001b88:	609a      	str	r2, [r3, #8]

  while (MQTTConnect(&mqttClient, &data) != SUCCESSS)
 8001b8a:	bf00      	nop
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4823      	ldr	r0, [pc, #140]	; (8001c20 <main+0x170>)
 8001b92:	f7fe fe7d 	bl	8000890 <MQTTConnect>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f7      	bne.n	8001b8c <main+0xdc>
    ;

  while (MQTTSubscribe(&mqttClient, "Subscribe/Topic", opts.qos, messageArrived) != SUCCESSS)
 8001b9c:	bf00      	nop
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <main+0x178>)
 8001ba0:	7b1a      	ldrb	r2, [r3, #12]
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <main+0x184>)
 8001ba4:	4924      	ldr	r1, [pc, #144]	; (8001c38 <main+0x188>)
 8001ba6:	481e      	ldr	r0, [pc, #120]	; (8001c20 <main+0x170>)
 8001ba8:	f7fe fef8 	bl	800099c <MQTTSubscribe>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f5      	bne.n	8001b9e <main+0xee>
    ;

  /* Infinite loop */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb8:	4820      	ldr	r0, [pc, #128]	; (8001c3c <main+0x18c>)
 8001bba:	f002 f92e 	bl	8003e1a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc4:	481d      	ldr	r0, [pc, #116]	; (8001c3c <main+0x18c>)
 8001bc6:	f002 f928 	bl	8003e1a <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
//	  schedule(2000);
	  MQTTYield(&mqttClient, data.keepAliveInterval);
 8001bca:	8bbb      	ldrh	r3, [r7, #28]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4814      	ldr	r0, [pc, #80]	; (8001c20 <main+0x170>)
 8001bd0:	f7fe fe1a 	bl	8000808 <MQTTYield>
	  if(flag == 1 )
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <main+0x190>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d1f6      	bne.n	8001bca <main+0x11a>
		  {
		  sprintf(payload, "{ \"id\": 1 }", count);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <main+0x194>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4919      	ldr	r1, [pc, #100]	; (8001c48 <main+0x198>)
 8001be4:	4812      	ldr	r0, [pc, #72]	; (8001c30 <main+0x180>)
 8001be6:	f004 f88f 	bl	8005d08 <siprintf>
		  message.payloadlen = strlen(payload);
 8001bea:	4811      	ldr	r0, [pc, #68]	; (8001c30 <main+0x180>)
 8001bec:	f7fe faae 	bl	800014c <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <main+0x17c>)
 8001bf4:	60d3      	str	r3, [r2, #12]
		  MQTTPublish(&mqttClient, "Server-TCU/WakeUp", &message);
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <main+0x17c>)
 8001bf8:	4914      	ldr	r1, [pc, #80]	; (8001c4c <main+0x19c>)
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <main+0x170>)
 8001bfc:	f7fe ff74 	bl	8000ae8 <MQTTPublish>
		  flag=0;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <main+0x190>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
	  MQTTYield(&mqttClient, data.keepAliveInterval);
 8001c06:	e7e0      	b.n	8001bca <main+0x11a>
 8001c08:	080066c8 	.word	0x080066c8
 8001c0c:	9001a8c0 	.word	0x9001a8c0
 8001c10:	0101a8c0 	.word	0x0101a8c0
 8001c14:	20000004 	.word	0x20000004
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000120 	.word	0x20000120
 8001c20:	200009c0 	.word	0x200009c0
 8001c24:	080066d0 	.word	0x080066d0
 8001c28:	2000099c 	.word	0x2000099c
 8001c2c:	2000096c 	.word	0x2000096c
 8001c30:	2000097c 	.word	0x2000097c
 8001c34:	080019a1 	.word	0x080019a1
 8001c38:	08006698 	.word	0x08006698
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	20000969 	.word	0x20000969
 8001c44:	2000096a 	.word	0x2000096a
 8001c48:	080066a8 	.word	0x080066a8
 8001c4c:	080066b4 	.word	0x080066b4

08001c50 <SystemClock_Config>:
		  }
  }
  /* USER CODE END 3 */
}
void SystemClock_Config(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b090      	sub	sp, #64	; 0x40
 8001c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	2228      	movs	r2, #40	; 0x28
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 f84a 	bl	8005cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c80:	2301      	movs	r3, #1
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c84:	2302      	movs	r3, #2
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 f907 	bl	8003eac <HAL_RCC_OscConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ca4:	f000 f954 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca8:	230f      	movs	r3, #15
 8001caa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cac:	2302      	movs	r3, #2
 8001cae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fb74 	bl	80043b0 <HAL_RCC_ClockConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cce:	f000 f93f 	bl	8001f50 <Error_Handler>
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3740      	adds	r7, #64	; 0x40
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <MX_SPI1_Init+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d10:	2210      	movs	r2, #16
 8001d12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d28:	220a      	movs	r2, #10
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d2e:	f002 fc9b 	bl	8004668 <HAL_SPI_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d38:	f000 f90a 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200000c8 	.word	0x200000c8
 8001d44:	40013000 	.word	0x40013000

08001d48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <MX_TIM3_Init+0xac>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001d6c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001d7a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d8c:	4818      	ldr	r0, [pc, #96]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001d8e:	f003 faf7 	bl	8005380 <HAL_TIM_Base_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d98:	f000 f8da 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	4619      	mov	r1, r3
 8001da8:	4811      	ldr	r0, [pc, #68]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001daa:	f003 fd1a 	bl	80057e2 <HAL_TIM_ConfigClockSource>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001db4:	f000 f8cc 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001db8:	2108      	movs	r1, #8
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001dbc:	f003 fbb0 	bl	8005520 <HAL_TIM_OnePulse_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dc6:	f000 f8c3 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM3_Init+0xa8>)
 8001dd8:	f003 fee6 	bl	8005ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001de2:	f000 f8b5 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000920 	.word	0x20000920
 8001df4:	40000400 	.word	0x40000400

08001df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 0310 	add.w	r3, r7, #16
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e12:	f043 0310 	orr.w	r3, r3, #16
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a3f      	ldr	r2, [pc, #252]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <MX_GPIO_Init+0x148>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5a:	483a      	ldr	r0, [pc, #232]	; (8001f44 <MX_GPIO_Init+0x14c>)
 8001e5c:	f001 ffdd 	bl	8003e1a <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f241 0110 	movw	r1, #4112	; 0x1010
 8001e66:	4838      	ldr	r0, [pc, #224]	; (8001f48 <MX_GPIO_Init+0x150>)
 8001e68:	f001 ffd7 	bl	8003e1a <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC14 */
	  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e70:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	482f      	ldr	r0, [pc, #188]	; (8001f44 <MX_GPIO_Init+0x14c>)
 8001e86:	f001 fe2d 	bl	8003ae4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8e:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <MX_GPIO_Init+0x154>)
 8001e90:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	482a      	ldr	r0, [pc, #168]	; (8001f48 <MX_GPIO_Init+0x150>)
 8001e9e:	f001 fe21 	bl	8003ae4 <HAL_GPIO_Init>
	  /***********/
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4824      	ldr	r0, [pc, #144]	; (8001f48 <MX_GPIO_Init+0x150>)
 8001eb6:	f001 fe15 	bl	8003ae4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA4 PA12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_12;
 8001eba:	f241 0310 	movw	r3, #4112	; 0x1010
 8001ebe:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481d      	ldr	r0, [pc, #116]	; (8001f48 <MX_GPIO_Init+0x150>)
 8001ed4:	f001 fe06 	bl	8003ae4 <HAL_GPIO_Init>
	  /*Configure GPIO pin : PA9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001edc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	4619      	mov	r1, r3
 8001eec:	4816      	ldr	r0, [pc, #88]	; (8001f48 <MX_GPIO_Init+0x150>)
 8001eee:	f001 fdf9 	bl	8003ae4 <HAL_GPIO_Init>
	  /*Configure GPIO pin : PA10 */
	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4619      	mov	r1, r3
 8001f06:	4810      	ldr	r0, [pc, #64]	; (8001f48 <MX_GPIO_Init+0x150>)
 8001f08:	f001 fdec 	bl	8003ae4 <HAL_GPIO_Init>
	  /*Configure GPIO pin : PA13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <MX_GPIO_Init+0x150>)
 8001f22:	f001 fddf 	bl	8003ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	f001 fd2b 	bl	8003986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f30:	2007      	movs	r0, #7
 8001f32:	f001 fd44 	bl	80039be <HAL_NVIC_EnableIRQ>

}
 8001f36:	bf00      	nop
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	10110000 	.word	0x10110000

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <Error_Handler+0x8>

08001f5a <TimerInit>:
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer *timer)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	605a      	str	r2, [r3, #4]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
	...

08001f74 <TimerIsExpired>:
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer *timer)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <TimerIsExpired+0x24>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	0fdb      	lsrs	r3, r3, #31
 8001f8c:	b2db      	uxtb	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	20000a1c 	.word	0x20000a1c

08001f9c <TimerCountdownMS>:
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer *timer, unsigned int timeout)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <TimerCountdownMS+0x20>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000a1c 	.word	0x20000a1c

08001fc0 <TimerCountdown>:
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer *timer, unsigned int timeout)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd0:	fb03 f202 	mul.w	r2, r3, r2
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <TimerCountdown+0x28>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	441a      	add	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	605a      	str	r2, [r3, #4]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000a1c 	.word	0x20000a1c

08001fec <TimerLeftMS>:
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer *timer)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <TimerLeftMS+0x24>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000a1c 	.word	0x20000a1c

08002014 <NewNetwork>:
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network *n, int sn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <NewNetwork+0x2c>)
 8002028:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <NewNetwork+0x30>)
 800202e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <NewNetwork+0x34>)
 8002034:	60da      	str	r2, [r3, #12]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	0800204d 	.word	0x0800204d
 8002044:	0800209f 	.word	0x0800209f
 8002048:	080020df 	.word	0x080020df

0800204c <w5x00_read>:
 *         that contains the configuration information for the Network.
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 */
int w5x00_read(Network *n, unsigned char *buffer, int len)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]

	if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3301      	adds	r3, #1
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fe2c 	bl	8002cc4 <WIZCHIP_READ>
 800206c:	4603      	mov	r3, r0
 800206e:	2b17      	cmp	r3, #23
 8002070:	d111      	bne.n	8002096 <w5x00_read+0x4a>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	f000 ffc8 	bl	800300e <getSn_RX_RSR>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <w5x00_read+0x4a>
		return recv(n->my_socket, buffer, len);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fc4b 	bl	8002928 <recv>
 8002092:	4603      	mov	r3, r0
 8002094:	e7ff      	b.n	8002096 <w5x00_read+0x4a>
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <w5x00_write>:
 *         that contains the configuration information for the Network.
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 */
int w5x00_write(Network *n, unsigned char *buffer, int len)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
	if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	3301      	adds	r3, #1
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fe03 	bl	8002cc4 <WIZCHIP_READ>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b17      	cmp	r3, #23
 80020c2:	d108      	bne.n	80020d6 <w5x00_write+0x38>
		return send(n->my_socket, buffer, len);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fb31 	bl	8002734 <send>
 80020d2:	4603      	mov	r3, r0
 80020d4:	e7ff      	b.n	80020d6 <w5x00_write+0x38>
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network *n)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 faac 	bl	8002648 <disconnect>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <ConnectNetwork>:
 *         that contains the configuration information for the Network.
 *         ip : server iP.
 *         port : server port.
 */
int ConnectNetwork(Network *n, char *ip, int port)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
	int32_t ret;
	uint8_t myport = 1883;
 8002104:	235b      	movs	r3, #91	; 0x5b
 8002106:	75fb      	strb	r3, [r7, #23]

	while (1)
	{
		ret = socket(n->my_socket, Sn_MR_TCP, myport, 0);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	7dfa      	ldrb	r2, [r7, #23]
 800210e:	2300      	movs	r3, #0
 8002110:	2101      	movs	r1, #1
 8002112:	f000 f839 	bl	8002188 <socket>
 8002116:	6138      	str	r0, [r7, #16]
		if (ret < 0)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da09      	bge.n	8002132 <ConnectNetwork+0x3a>
		{
			close(n->my_socket);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f946 	bl	80023b4 <close>
			HAL_Delay(500);
 8002128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800212c:	f001 fb30 	bl	8003790 <HAL_Delay>
			continue;
 8002130:	e024      	b.n	800217c <ConnectNetwork+0x84>
		}

		while (getSn_SR(n->my_socket) != SOCK_INIT)
 8002132:	bf00      	nop
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3301      	adds	r3, #1
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fdbe 	bl	8002cc4 <WIZCHIP_READ>
 8002148:	4603      	mov	r3, r0
 800214a:	2b13      	cmp	r3, #19
 800214c:	d1f2      	bne.n	8002134 <ConnectNetwork+0x3c>
			;

		ret = connect(n->my_socket, ip, port);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f99a 	bl	8002490 <connect>
 800215c:	6138      	str	r0, [r7, #16]
		if (ret < 0)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da09      	bge.n	8002178 <ConnectNetwork+0x80>
		{
			close(n->my_socket);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f923 	bl	80023b4 <close>
			HAL_Delay(500);
 800216e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002172:	f001 fb0d 	bl	8003790 <HAL_Delay>
			continue;
 8002176:	e001      	b.n	800217c <ConnectNetwork+0x84>
		}
		return 1;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <ConnectNetwork+0x86>
	{
 800217c:	e7c4      	b.n	8002108 <ConnectNetwork+0x10>
	}
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	4603      	mov	r3, r0
 800219c:	71bb      	strb	r3, [r7, #6]
 800219e:	460b      	mov	r3, r1
 80021a0:	80bb      	strh	r3, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d902      	bls.n	80021b2 <socket+0x2a>
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	e0f2      	b.n	8002398 <socket+0x210>
	switch(protocol)
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d005      	beq.n	80021c4 <socket+0x3c>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dd11      	ble.n	80021e0 <socket+0x58>
 80021bc:	3b02      	subs	r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d80e      	bhi.n	80021e0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80021c2:	e011      	b.n	80021e8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2204      	movs	r2, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80021d0:	f000 fe12 	bl	8002df8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <socket+0x5e>
 80021da:	f06f 0302 	mvn.w	r3, #2
 80021de:	e0db      	b.n	8002398 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80021e0:	f06f 0304 	mvn.w	r3, #4
 80021e4:	e0d8      	b.n	8002398 <socket+0x210>
	    break;
 80021e6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <socket+0x70>
 80021f2:	f06f 0305 	mvn.w	r3, #5
 80021f6:	e0cf      	b.n	8002398 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d025      	beq.n	800224a <socket+0xc2>
	{
   	switch(protocol)
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d002      	beq.n	800220a <socket+0x82>
 8002204:	2b02      	cmp	r3, #2
 8002206:	d008      	beq.n	800221a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002208:	e024      	b.n	8002254 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002210:	2b00      	cmp	r3, #0
 8002212:	d11c      	bne.n	800224e <socket+0xc6>
 8002214:	f06f 0305 	mvn.w	r3, #5
 8002218:	e0be      	b.n	8002398 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db02      	blt.n	8002232 <socket+0xaa>
 800222c:	f06f 0305 	mvn.w	r3, #5
 8002230:	e0b2      	b.n	8002398 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800223c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db06      	blt.n	8002252 <socket+0xca>
 8002244:	f06f 0305 	mvn.w	r3, #5
 8002248:	e0a6      	b.n	8002398 <socket+0x210>
   	}
   }
 800224a:	bf00      	nop
 800224c:	e002      	b.n	8002254 <socket+0xcc>
   	      break;
 800224e:	bf00      	nop
 8002250:	e000      	b.n	8002254 <socket+0xcc>
   	      break;
 8002252:	bf00      	nop
	close(sn);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f8ac 	bl	80023b4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	3301      	adds	r3, #1
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4618      	mov	r0, r3
 8002266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800226a:	f023 030f 	bic.w	r3, r3, #15
 800226e:	b25a      	sxtb	r2, r3
 8002270:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002274:	4313      	orrs	r3, r2
 8002276:	b25b      	sxtb	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4619      	mov	r1, r3
 800227c:	f000 fd6e 	bl	8002d5c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d110      	bne.n	80022a8 <socket+0x120>
	{
	   port = sock_any_port++;
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <socket+0x218>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	b291      	uxth	r1, r2
 800228e:	4a44      	ldr	r2, [pc, #272]	; (80023a0 <socket+0x218>)
 8002290:	8011      	strh	r1, [r2, #0]
 8002292:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002294:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <socket+0x218>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800229c:	4293      	cmp	r3, r2
 800229e:	d103      	bne.n	80022a8 <socket+0x120>
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <socket+0x218>)
 80022a2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80022a6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	3301      	adds	r3, #1
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b4:	461a      	mov	r2, r3
 80022b6:	88bb      	ldrh	r3, [r7, #4]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f000 fd4b 	bl	8002d5c <WIZCHIP_WRITE>
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	3301      	adds	r3, #1
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	461a      	mov	r2, r3
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 fd3e 	bl	8002d5c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	3301      	adds	r3, #1
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fd34 	bl	8002d5c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80022f4:	bf00      	nop
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	3301      	adds	r3, #1
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fcde 	bl	8002cc4 <WIZCHIP_READ>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f3      	bne.n	80022f6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2201      	movs	r2, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	b21b      	sxth	r3, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	b21a      	sxth	r2, r3
 800231c:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <socket+0x21c>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b21b      	sxth	r3, r3
 8002322:	4013      	ands	r3, r2
 8002324:	b21b      	sxth	r3, r3
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <socket+0x21c>)
 800232a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	b21a      	sxth	r2, r3
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <socket+0x21c>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b21b      	sxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b21b      	sxth	r3, r3
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <socket+0x21c>)
 8002348:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2201      	movs	r2, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	b21b      	sxth	r3, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	b21a      	sxth	r2, r3
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <socket+0x220>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b21b      	sxth	r3, r3
 800235e:	4013      	ands	r3, r2
 8002360:	b21b      	sxth	r3, r3
 8002362:	b29a      	uxth	r2, r3
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <socket+0x220>)
 8002366:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <socket+0x224>)
 800236c:	2100      	movs	r1, #0
 800236e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <socket+0x228>)
 8002376:	2100      	movs	r1, #0
 8002378:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800237a:	bf00      	nop
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3301      	adds	r3, #1
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fc9b 	bl	8002cc4 <WIZCHIP_READ>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f3      	beq.n	800237c <socket+0x1f4>
   return (int8_t)sn;
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bd90      	pop	{r4, r7, pc}
 80023a0:	20000008 	.word	0x20000008
 80023a4:	20000a20 	.word	0x20000a20
 80023a8:	20000a22 	.word	0x20000a22
 80023ac:	20000a24 	.word	0x20000a24
 80023b0:	20000a34 	.word	0x20000a34

080023b4 <close>:

int8_t close(uint8_t sn)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d902      	bls.n	80023ca <close+0x16>
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	e055      	b.n	8002476 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	3301      	adds	r3, #1
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023d6:	2110      	movs	r1, #16
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fcbf 	bl	8002d5c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80023de:	bf00      	nop
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3301      	adds	r3, #1
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fc69 	bl	8002cc4 <WIZCHIP_READ>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f3      	bne.n	80023e0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	3301      	adds	r3, #1
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002404:	211f      	movs	r1, #31
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fca8 	bl	8002d5c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	2201      	movs	r2, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	b21b      	sxth	r3, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	b21a      	sxth	r2, r3
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <close+0xcc>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b21b      	sxth	r3, r3
 8002420:	4013      	ands	r3, r2
 8002422:	b21b      	sxth	r3, r3
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <close+0xcc>)
 8002428:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2201      	movs	r2, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	b21b      	sxth	r3, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	b21a      	sxth	r2, r3
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <close+0xd0>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b21b      	sxth	r3, r3
 800243e:	4013      	ands	r3, r2
 8002440:	b21b      	sxth	r3, r3
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <close+0xd0>)
 8002446:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <close+0xd4>)
 800244c:	2100      	movs	r1, #0
 800244e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <close+0xd8>)
 8002456:	2100      	movs	r1, #0
 8002458:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800245a:	bf00      	nop
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	3301      	adds	r3, #1
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fc2b 	bl	8002cc4 <WIZCHIP_READ>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f3      	bne.n	800245c <close+0xa8>
	return SOCK_OK;
 8002474:	2301      	movs	r3, #1
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000a20 	.word	0x20000a20
 8002484:	20000a22 	.word	0x20000a22
 8002488:	20000a24 	.word	0x20000a24
 800248c:	20000a34 	.word	0x20000a34

08002490 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d902      	bls.n	80024ac <connect+0x1c>
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e0c6      	b.n	800263a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	3301      	adds	r3, #1
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fc05 	bl	8002cc4 <WIZCHIP_READ>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d002      	beq.n	80024ca <connect+0x3a>
 80024c4:	f06f 0304 	mvn.w	r3, #4
 80024c8:	e0b7      	b.n	800263a <connect+0x1aa>
   CHECK_SOCKINIT();
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	3301      	adds	r3, #1
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fbf4 	bl	8002cc4 <WIZCHIP_READ>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b13      	cmp	r3, #19
 80024e0:	d002      	beq.n	80024e8 <connect+0x58>
 80024e2:	f06f 0302 	mvn.w	r3, #2
 80024e6:	e0a8      	b.n	800263a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	3201      	adds	r2, #1
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	3202      	adds	r2, #2
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	3203      	adds	r2, #3
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d002      	beq.n	8002526 <connect+0x96>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <connect+0x9c>
 8002526:	f06f 030b 	mvn.w	r3, #11
 800252a:	e086      	b.n	800263a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800252c:	88bb      	ldrh	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <connect+0xa8>
 8002532:	f06f 030a 	mvn.w	r3, #10
 8002536:	e080      	b.n	800263a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	3301      	adds	r3, #1
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002544:	2204      	movs	r2, #4
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fcb5 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	3301      	adds	r3, #1
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255a:	461a      	mov	r2, r3
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 fbf8 	bl	8002d5c <WIZCHIP_WRITE>
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	3301      	adds	r3, #1
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002578:	461a      	mov	r2, r3
 800257a:	88bb      	ldrh	r3, [r7, #4]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f000 fbeb 	bl	8002d5c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	3301      	adds	r3, #1
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002592:	2104      	movs	r1, #4
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fbe1 	bl	8002d5c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800259a:	bf00      	nop
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	3301      	adds	r3, #1
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fb8b 	bl	8002cc4 <WIZCHIP_READ>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f3      	bne.n	800259c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <connect+0x1b4>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	fa42 f303 	asr.w	r3, r2, r3
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02b      	beq.n	8002620 <connect+0x190>
 80025c8:	2300      	movs	r3, #0
 80025ca:	e036      	b.n	800263a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3301      	adds	r3, #1
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fb73 	bl	8002cc4 <WIZCHIP_READ>
 80025de:	4603      	mov	r3, r0
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3301      	adds	r3, #1
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025f4:	2108      	movs	r1, #8
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fbb0 	bl	8002d5c <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80025fc:	f06f 030c 	mvn.w	r3, #12
 8002600:	e01b      	b.n	800263a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3301      	adds	r3, #1
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fb58 	bl	8002cc4 <WIZCHIP_READ>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800261a:	f06f 0303 	mvn.w	r3, #3
 800261e:	e00c      	b.n	800263a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	3301      	adds	r3, #1
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fb49 	bl	8002cc4 <WIZCHIP_READ>
 8002632:	4603      	mov	r3, r0
 8002634:	2b17      	cmp	r3, #23
 8002636:	d1c9      	bne.n	80025cc <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8002638:	2301      	movs	r3, #1
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000a20 	.word	0x20000a20

08002648 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d902      	bls.n	800265e <disconnect+0x16>
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	e062      	b.n	8002724 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3301      	adds	r3, #1
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fb2c 	bl	8002cc4 <WIZCHIP_READ>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	2b01      	cmp	r3, #1
 8002674:	d002      	beq.n	800267c <disconnect+0x34>
 8002676:	f06f 0304 	mvn.w	r3, #4
 800267a:	e053      	b.n	8002724 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3301      	adds	r3, #1
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002688:	2108      	movs	r1, #8
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fb66 	bl	8002d5c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002690:	bf00      	nop
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	3301      	adds	r3, #1
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fb10 	bl	8002cc4 <WIZCHIP_READ>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f3      	bne.n	8002692 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2201      	movs	r2, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	b21a      	sxth	r2, r3
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <disconnect+0xe4>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4013      	ands	r3, r2
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <disconnect+0xe4>)
 80026c6:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <disconnect+0xe8>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	fa42 f303 	asr.w	r3, r2, r3
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <disconnect+0xc2>
 80026dc:	2300      	movs	r3, #0
 80026de:	e021      	b.n	8002724 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3301      	adds	r3, #1
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fae9 	bl	8002cc4 <WIZCHIP_READ>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <disconnect+0xc2>
	   {
	      close(sn);
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fe58 	bl	80023b4 <close>
	      return SOCKERR_TIMEOUT;
 8002704:	f06f 030c 	mvn.w	r3, #12
 8002708:	e00c      	b.n	8002724 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	3301      	adds	r3, #1
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fad4 	bl	8002cc4 <WIZCHIP_READ>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1de      	bne.n	80026e0 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000a22 	.word	0x20000a22
 8002730:	20000a20 	.word	0x20000a20

08002734 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002748:	2300      	movs	r3, #0
 800274a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d902      	bls.n	8002758 <send+0x24>
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e0de      	b.n	8002916 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	3301      	adds	r3, #1
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4618      	mov	r0, r3
 8002762:	f000 faaf 	bl	8002cc4 <WIZCHIP_READ>
 8002766:	4603      	mov	r3, r0
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	2b01      	cmp	r3, #1
 800276e:	d002      	beq.n	8002776 <send+0x42>
 8002770:	f06f 0304 	mvn.w	r3, #4
 8002774:	e0cf      	b.n	8002916 <send+0x1e2>
   CHECK_SOCKDATA();
 8002776:	88bb      	ldrh	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <send+0x4e>
 800277c:	f06f 030d 	mvn.w	r3, #13
 8002780:	e0c9      	b.n	8002916 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3301      	adds	r3, #1
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fa98 	bl	8002cc4 <WIZCHIP_READ>
 8002794:	4603      	mov	r3, r0
 8002796:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b17      	cmp	r3, #23
 800279c:	d005      	beq.n	80027aa <send+0x76>
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b1c      	cmp	r3, #28
 80027a2:	d002      	beq.n	80027aa <send+0x76>
 80027a4:	f06f 0306 	mvn.w	r3, #6
 80027a8:	e0b5      	b.n	8002916 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <send+0x1ec>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	fa42 f303 	asr.w	r3, r2, r3
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d039      	beq.n	8002832 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3301      	adds	r3, #1
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa7a 	bl	8002cc4 <WIZCHIP_READ>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d019      	beq.n	8002816 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	3301      	adds	r3, #1
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027ee:	2110      	movs	r1, #16
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fab3 	bl	8002d5c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2201      	movs	r2, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	b21b      	sxth	r3, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b46      	ldr	r3, [pc, #280]	; (8002920 <send+0x1ec>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b21b      	sxth	r3, r3
 800280a:	4013      	ands	r3, r2
 800280c:	b21b      	sxth	r3, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <send+0x1ec>)
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	e00d      	b.n	8002832 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <send+0xfa>
      {
         close(sn);
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fdc6 	bl	80023b4 <close>
         return SOCKERR_TIMEOUT;
 8002828:	f06f 030c 	mvn.w	r3, #12
 800282c:	e073      	b.n	8002916 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800282e:	2300      	movs	r3, #0
 8002830:	e071      	b.n	8002916 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3301      	adds	r3, #1
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fa40 	bl	8002cc4 <WIZCHIP_READ>
 8002844:	4603      	mov	r3, r0
 8002846:	b29b      	uxth	r3, r3
 8002848:	029b      	lsls	r3, r3, #10
 800284a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800284c:	88ba      	ldrh	r2, [r7, #4]
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d901      	bls.n	8002858 <send+0x124>
 8002854:	89bb      	ldrh	r3, [r7, #12]
 8002856:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fb8c 	bl	8002f78 <getSn_TX_FSR>
 8002860:	4603      	mov	r3, r0
 8002862:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3301      	adds	r3, #1
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fa27 	bl	8002cc4 <WIZCHIP_READ>
 8002876:	4603      	mov	r3, r0
 8002878:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b17      	cmp	r3, #23
 800287e:	d009      	beq.n	8002894 <send+0x160>
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b1c      	cmp	r3, #28
 8002884:	d006      	beq.n	8002894 <send+0x160>
      {
         close(sn);
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fd93 	bl	80023b4 <close>
         return SOCKERR_SOCKSTATUS;
 800288e:	f06f 0306 	mvn.w	r3, #6
 8002892:	e040      	b.n	8002916 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <send+0x1f0>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	fa42 f303 	asr.w	r3, r2, r3
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <send+0x180>
 80028a8:	88ba      	ldrh	r2, [r7, #4]
 80028aa:	89bb      	ldrh	r3, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d901      	bls.n	80028b4 <send+0x180>
 80028b0:	2300      	movs	r3, #0
 80028b2:	e030      	b.n	8002916 <send+0x1e2>
      if(len <= freesize) break;
 80028b4:	88ba      	ldrh	r2, [r7, #4]
 80028b6:	89bb      	ldrh	r3, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d900      	bls.n	80028be <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80028bc:	e7cc      	b.n	8002858 <send+0x124>
      if(len <= freesize) break;
 80028be:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80028c0:	88ba      	ldrh	r2, [r7, #4]
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fbec 	bl	80030a4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	3301      	adds	r3, #1
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80028d8:	2120      	movs	r1, #32
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fa3e 	bl	8002d5c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80028e0:	bf00      	nop
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3301      	adds	r3, #1
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f9e8 	bl	8002cc4 <WIZCHIP_READ>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f3      	bne.n	80028e2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2201      	movs	r2, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	b21a      	sxth	r2, r3
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <send+0x1ec>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b21b      	sxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	b21b      	sxth	r3, r3
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <send+0x1ec>)
 8002912:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002914:	88bb      	ldrh	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000a22 	.word	0x20000a22
 8002924:	20000a20 	.word	0x20000a20

08002928 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	4613      	mov	r3, r2
 8002936:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2b08      	cmp	r3, #8
 8002944:	d902      	bls.n	800294c <recv+0x24>
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e09c      	b.n	8002a86 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	3301      	adds	r3, #1
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f9b5 	bl	8002cc4 <WIZCHIP_READ>
 800295a:	4603      	mov	r3, r0
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	2b01      	cmp	r3, #1
 8002962:	d002      	beq.n	800296a <recv+0x42>
 8002964:	f06f 0304 	mvn.w	r3, #4
 8002968:	e08d      	b.n	8002a86 <recv+0x15e>
   CHECK_SOCKDATA();
 800296a:	88bb      	ldrh	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <recv+0x4e>
 8002970:	f06f 030d 	mvn.w	r3, #13
 8002974:	e087      	b.n	8002a86 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	3301      	adds	r3, #1
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f99e 	bl	8002cc4 <WIZCHIP_READ>
 8002988:	4603      	mov	r3, r0
 800298a:	b29b      	uxth	r3, r3
 800298c:	029b      	lsls	r3, r3, #10
 800298e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002990:	89ba      	ldrh	r2, [r7, #12]
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d201      	bcs.n	800299c <recv+0x74>
 8002998:	89bb      	ldrh	r3, [r7, #12]
 800299a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fb35 	bl	800300e <getSn_RX_RSR>
 80029a4:	4603      	mov	r3, r0
 80029a6:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	3301      	adds	r3, #1
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f985 	bl	8002cc4 <WIZCHIP_READ>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b17      	cmp	r3, #23
 80029c2:	d026      	beq.n	8002a12 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b1c      	cmp	r3, #28
 80029c8:	d11c      	bne.n	8002a04 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80029ca:	89bb      	ldrh	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d133      	bne.n	8002a38 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fad0 	bl	8002f78 <getSn_TX_FSR>
 80029d8:	4603      	mov	r3, r0
 80029da:	461c      	mov	r4, r3
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	3301      	adds	r3, #1
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f96b 	bl	8002cc4 <WIZCHIP_READ>
 80029ee:	4603      	mov	r3, r0
 80029f0:	029b      	lsls	r3, r3, #10
 80029f2:	429c      	cmp	r4, r3
 80029f4:	d10d      	bne.n	8002a12 <recv+0xea>
               {
                  close(sn);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fcdb 	bl	80023b4 <close>
                  return SOCKERR_SOCKSTATUS;
 80029fe:	f06f 0306 	mvn.w	r3, #6
 8002a02:	e040      	b.n	8002a86 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fcd4 	bl	80023b4 <close>
               return SOCKERR_SOCKSTATUS;
 8002a0c:	f06f 0306 	mvn.w	r3, #6
 8002a10:	e039      	b.n	8002a86 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <recv+0x168>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	fa42 f303 	asr.w	r3, r2, r3
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <recv+0x108>
 8002a26:	89bb      	ldrh	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <recv+0x108>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e02a      	b.n	8002a86 <recv+0x15e>
         if(recvsize != 0) break;
 8002a30:	89bb      	ldrh	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002a36:	e7b1      	b.n	800299c <recv+0x74>
               if(recvsize != 0) break;
 8002a38:	bf00      	nop
 8002a3a:	e000      	b.n	8002a3e <recv+0x116>
         if(recvsize != 0) break;
 8002a3c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002a3e:	89ba      	ldrh	r2, [r7, #12]
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d201      	bcs.n	8002a4a <recv+0x122>
 8002a46:	89bb      	ldrh	r3, [r7, #12]
 8002a48:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002a4a:	88ba      	ldrh	r2, [r7, #4]
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fb83 	bl	800315c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a62:	2140      	movs	r1, #64	; 0x40
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f979 	bl	8002d5c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002a6a:	bf00      	nop
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3301      	adds	r3, #1
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f923 	bl	8002cc4 <WIZCHIP_READ>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f3      	bne.n	8002a6c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002a84:	88bb      	ldrh	r3, [r7, #4]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000a20 	.word	0x20000a20

08002a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_MspInit+0x40>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <HAL_MspInit+0x40>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6193      	str	r3, [r2, #24]
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_MspInit+0x40>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_MspInit+0x40>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_MspInit+0x40>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_MspInit+0x40>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0310 	add.w	r3, r7, #16
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <HAL_SPI_MspInit+0x98>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d137      	bne.n	8002b68 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_SPI_MspInit+0x9c>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_SPI_MspInit+0x9c>)
 8002afe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b02:	6193      	str	r3, [r2, #24]
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_SPI_MspInit+0x9c>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_SPI_MspInit+0x9c>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_SPI_MspInit+0x9c>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_SPI_MspInit+0x9c>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b28:	23a0      	movs	r3, #160	; 0xa0
 8002b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4619      	mov	r1, r3
 8002b3a:	480f      	ldr	r0, [pc, #60]	; (8002b78 <HAL_SPI_MspInit+0xa0>)
 8002b3c:	f000 ffd2 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b40:	2340      	movs	r3, #64	; 0x40
 8002b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	4619      	mov	r1, r3
 8002b52:	4809      	ldr	r0, [pc, #36]	; (8002b78 <HAL_SPI_MspInit+0xa0>)
 8002b54:	f000 ffc6 	bl	8003ae4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2023      	movs	r0, #35	; 0x23
 8002b5e:	f000 ff12 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b62:	2023      	movs	r0, #35	; 0x23
 8002b64:	f000 ff2b 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40013000 	.word	0x40013000
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010800 	.word	0x40010800

08002b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_TIM_Base_MspInit+0x44>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d113      	bne.n	8002bb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_TIM_Base_MspInit+0x48>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_TIM_Base_MspInit+0x48>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	61d3      	str	r3, [r2, #28]
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_TIM_Base_MspInit+0x48>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	201d      	movs	r0, #29
 8002bac:	f000 feeb 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bb0:	201d      	movs	r0, #29
 8002bb2:	f000 ff04 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <NMI_Handler+0x4>

08002bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <HardFault_Handler+0x4>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <MemManage_Handler+0x4>

08002bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <BusFault_Handler+0x4>

08002be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <UsageFault_Handler+0x4>

08002be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c0e:	f000 fda3 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f001 f92e 	bl	8003e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <TIM3_IRQHandler+0x10>)
 8002c2a:	f002 fcd2 	bl	80055d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000920 	.word	0x20000920

08002c38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <SPI1_IRQHandler+0x10>)
 8002c3e:	f002 f9a3 	bl	8004f88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200000c8 	.word	0x200000c8

08002c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <_sbrk+0x5c>)
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <_sbrk+0x60>)
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_sbrk+0x64>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <_sbrk+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c7c:	f003 f804 	bl	8005c88 <__errno>
 8002c80:	4603      	mov	r3, r0
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	e009      	b.n	8002ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <_sbrk+0x64>)
 8002c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20005000 	.word	0x20005000
 8002cac:	00000400 	.word	0x00000400
 8002cb0:	20000a3c 	.word	0x20000a3c
 8002cb4:	20000a60 	.word	0x20000a60

08002cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002ccc:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <WIZCHIP_READ+0x24>
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d114      	bne.n	8002d12 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	0c12      	lsrs	r2, r2, #16
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	0a12      	lsrs	r2, r2, #8
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	4610      	mov	r0, r2
 8002d02:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4798      	blx	r3
 8002d10:	e011      	b.n	8002d36 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	f107 020c 	add.w	r2, r7, #12
 8002d30:	2103      	movs	r1, #3
 8002d32:	4610      	mov	r0, r2
 8002d34:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4798      	blx	r3
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <WIZCHIP_READ+0x94>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	4798      	blx	r3
   return ret;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000010 	.word	0x20000010

08002d5c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d119      	bne.n	8002db8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	0c12      	lsrs	r2, r2, #16
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	0a12      	lsrs	r2, r2, #8
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	4610      	mov	r0, r2
 8002daa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	4610      	mov	r0, r2
 8002db4:	4798      	blx	r3
 8002db6:	e013      	b.n	8002de0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	f107 020c 	add.w	r2, r7, #12
 8002dda:	2104      	movs	r1, #4
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002de6:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <WIZCHIP_WRITE+0x98>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	4798      	blx	r3
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000010 	.word	0x20000010

08002df8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <WIZCHIP_READ_BUF+0x2a>
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d126      	bne.n	8002e70 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	0c12      	lsrs	r2, r2, #16
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	0a12      	lsrs	r2, r2, #8
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	4610      	mov	r0, r2
 8002e48:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	82fb      	strh	r3, [r7, #22]
 8002e4e:	e00a      	b.n	8002e66 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	8afa      	ldrh	r2, [r7, #22]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	188c      	adds	r4, r1, r2
 8002e5a:	4798      	blx	r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002e60:	8afb      	ldrh	r3, [r7, #22]
 8002e62:	3301      	adds	r3, #1
 8002e64:	82fb      	strh	r3, [r7, #22]
 8002e66:	8afa      	ldrh	r2, [r7, #22]
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d3f0      	bcc.n	8002e50 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e6e:	e017      	b.n	8002ea0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	f107 0210 	add.w	r2, r7, #16
 8002e8e:	2103      	movs	r1, #3
 8002e90:	4610      	mov	r0, r2
 8002e92:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	68b8      	ldr	r0, [r7, #8]
 8002e9e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <WIZCHIP_READ_BUF+0xbc>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4798      	blx	r3
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	20000010 	.word	0x20000010

08002eb8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002ecc:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d126      	bne.n	8002f30 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	0c12      	lsrs	r2, r2, #16
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	4610      	mov	r0, r2
 8002eee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	0a12      	lsrs	r2, r2, #8
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	4610      	mov	r0, r2
 8002efc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	4610      	mov	r0, r2
 8002f08:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	82fb      	strh	r3, [r7, #22]
 8002f0e:	e00a      	b.n	8002f26 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	8afa      	ldrh	r2, [r7, #22]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	440a      	add	r2, r1
 8002f1a:	7812      	ldrb	r2, [r2, #0]
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f20:	8afb      	ldrh	r3, [r7, #22]
 8002f22:	3301      	adds	r3, #1
 8002f24:	82fb      	strh	r3, [r7, #22]
 8002f26:	8afa      	ldrh	r2, [r7, #22]
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d3f0      	bcc.n	8002f10 <WIZCHIP_WRITE_BUF+0x58>
 8002f2e:	e017      	b.n	8002f60 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	f107 0210 	add.w	r2, r7, #16
 8002f4e:	2103      	movs	r1, #3
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002f66:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	4798      	blx	r3
}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000010 	.word	0x20000010

08002f78 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	81fb      	strh	r3, [r7, #14]
 8002f86:	2300      	movs	r3, #0
 8002f88:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	3301      	adds	r3, #1
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe94 	bl	8002cc4 <WIZCHIP_READ>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002fa0:	89bb      	ldrh	r3, [r7, #12]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	b29c      	uxth	r4, r3
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	3301      	adds	r3, #1
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fe86 	bl	8002cc4 <WIZCHIP_READ>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4423      	add	r3, r4
 8002fbe:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002fc0:	89bb      	ldrh	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01a      	beq.n	8002ffc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3301      	adds	r3, #1
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe76 	bl	8002cc4 <WIZCHIP_READ>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002fdc:	89fb      	ldrh	r3, [r7, #14]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	b29c      	uxth	r4, r3
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fe68 	bl	8002cc4 <WIZCHIP_READ>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4423      	add	r3, r4
 8002ffa:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002ffc:	89fa      	ldrh	r2, [r7, #14]
 8002ffe:	89bb      	ldrh	r3, [r7, #12]
 8003000:	429a      	cmp	r2, r3
 8003002:	d1c2      	bne.n	8002f8a <getSn_TX_FSR+0x12>
   return val;
 8003004:	89fb      	ldrh	r3, [r7, #14]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}

0800300e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800300e:	b590      	push	{r4, r7, lr}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003018:	2300      	movs	r3, #0
 800301a:	81fb      	strh	r3, [r7, #14]
 800301c:	2300      	movs	r3, #0
 800301e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	3301      	adds	r3, #1
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fe49 	bl	8002cc4 <WIZCHIP_READ>
 8003032:	4603      	mov	r3, r0
 8003034:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003036:	89bb      	ldrh	r3, [r7, #12]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	b29c      	uxth	r4, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3301      	adds	r3, #1
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fe3b 	bl	8002cc4 <WIZCHIP_READ>
 800304e:	4603      	mov	r3, r0
 8003050:	b29b      	uxth	r3, r3
 8003052:	4423      	add	r3, r4
 8003054:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003056:	89bb      	ldrh	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01a      	beq.n	8003092 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	3301      	adds	r3, #1
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fe2b 	bl	8002cc4 <WIZCHIP_READ>
 800306e:	4603      	mov	r3, r0
 8003070:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	b29c      	uxth	r4, r3
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3301      	adds	r3, #1
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fe1d 	bl	8002cc4 <WIZCHIP_READ>
 800308a:	4603      	mov	r3, r0
 800308c:	b29b      	uxth	r3, r3
 800308e:	4423      	add	r3, r4
 8003090:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003092:	89fa      	ldrh	r2, [r7, #14]
 8003094:	89bb      	ldrh	r3, [r7, #12]
 8003096:	429a      	cmp	r2, r3
 8003098:	d1c2      	bne.n	8003020 <getSn_RX_RSR+0x12>
   return val;
 800309a:	89fb      	ldrh	r3, [r7, #14]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}

080030a4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80030bc:	88bb      	ldrh	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d048      	beq.n	8003154 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3301      	adds	r3, #1
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fdf8 	bl	8002cc4 <WIZCHIP_READ>
 80030d4:	4603      	mov	r3, r0
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	b29c      	uxth	r4, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	3301      	adds	r3, #1
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fdeb 	bl	8002cc4 <WIZCHIP_READ>
 80030ee:	4603      	mov	r3, r0
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	4423      	add	r3, r4
 80030f4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	79fa      	ldrb	r2, [r7, #7]
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	3202      	adds	r2, #2
 8003100:	00d2      	lsls	r2, r2, #3
 8003102:	4413      	add	r3, r2
 8003104:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003106:	88bb      	ldrh	r3, [r7, #4]
 8003108:	461a      	mov	r2, r3
 800310a:	6839      	ldr	r1, [r7, #0]
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f7ff fed3 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003112:	89fa      	ldrh	r2, [r7, #14]
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	3301      	adds	r3, #1
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003126:	461a      	mov	r2, r3
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b29b      	uxth	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f7ff fe12 	bl	8002d5c <WIZCHIP_WRITE>
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3301      	adds	r3, #1
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003144:	461a      	mov	r2, r3
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7ff fe05 	bl	8002d5c <WIZCHIP_WRITE>
 8003152:	e000      	b.n	8003156 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003154:	bf00      	nop
}
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bd90      	pop	{r4, r7, pc}

0800315c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
 8003168:	4613      	mov	r3, r2
 800316a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003174:	88bb      	ldrh	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d048      	beq.n	800320c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	3301      	adds	r3, #1
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fd9c 	bl	8002cc4 <WIZCHIP_READ>
 800318c:	4603      	mov	r3, r0
 800318e:	b29b      	uxth	r3, r3
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	b29c      	uxth	r4, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	3301      	adds	r3, #1
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fd8f 	bl	8002cc4 <WIZCHIP_READ>
 80031a6:	4603      	mov	r3, r0
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4423      	add	r3, r4
 80031ac:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80031ae:	89fb      	ldrh	r3, [r7, #14]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	79fa      	ldrb	r2, [r7, #7]
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	3203      	adds	r2, #3
 80031b8:	00d2      	lsls	r2, r2, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	68b8      	ldr	r0, [r7, #8]
 80031c6:	f7ff fe17 	bl	8002df8 <WIZCHIP_READ_BUF>
   ptr += len;
 80031ca:	89fa      	ldrh	r2, [r7, #14]
 80031cc:	88bb      	ldrh	r3, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3301      	adds	r3, #1
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80031de:	461a      	mov	r2, r3
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f7ff fdb6 	bl	8002d5c <WIZCHIP_WRITE>
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	3301      	adds	r3, #1
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80031fc:	461a      	mov	r2, r3
 80031fe:	89fb      	ldrh	r3, [r7, #14]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f7ff fda9 	bl	8002d5c <WIZCHIP_WRITE>
 800320a:	e000      	b.n	800320e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800320c:	bf00      	nop
}
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}

08003214 <cs_sel>:
extern SPI_HandleTypeDef hspi1;

/**
 * @brief function to set cs pin low to start transmission
 */
static void cs_sel(void) {
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8003218:	2200      	movs	r2, #0
 800321a:	2110      	movs	r1, #16
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <cs_sel+0x14>)
 800321e:	f000 fdfc 	bl	8003e1a <HAL_GPIO_WritePin>
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40010800 	.word	0x40010800

0800322c <cs_desel>:

/**
 * @brief function to set cs pin high to end transmission
 */
static void cs_desel(void) {
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8003230:	2201      	movs	r2, #1
 8003232:	2110      	movs	r1, #16
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <cs_desel+0x14>)
 8003236:	f000 fdf0 	bl	8003e1a <HAL_GPIO_WritePin>
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40010800 	.word	0x40010800

08003244 <spi_rb>:

/**
 * @brief function to read byte through spi
 */
uint8_t spi_rb(void) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 800324a:	1df9      	adds	r1, r7, #7
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	2201      	movs	r2, #1
 8003252:	4804      	ldr	r0, [pc, #16]	; (8003264 <spi_rb+0x20>)
 8003254:	f001 fbcf 	bl	80049f6 <HAL_SPI_Receive>
	return rbuf;
 8003258:	79fb      	ldrb	r3, [r7, #7]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200000c8 	.word	0x200000c8

08003268 <spi_wb>:

/**
 * @brief function to write byte through spi
 */
void spi_wb(uint8_t b) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8003272:	1df9      	adds	r1, r7, #7
 8003274:	f04f 33ff 	mov.w	r3, #4294967295
 8003278:	2201      	movs	r2, #1
 800327a:	4803      	ldr	r0, [pc, #12]	; (8003288 <spi_wb+0x20>)
 800327c:	f001 fa78 	bl	8004770 <HAL_SPI_Transmit>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200000c8 	.word	0x200000c8

0800328c <initializeW5500>:
 * @param ip is the node's IP address
 * @param sn is the node's subnet mask
 * @param gw is the node's gateway address
 */
void initializeW5500(uint8_t mac[], uint8_t ip[], uint8_t sn[], uint8_t gw[])
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08c      	sub	sp, #48	; 0x30
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
	uint8_t bufSize[] = { 2, 2, 2, 2, 2, 2, 2, 2};//size of each socket number in kilobytes
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <initializeW5500+0x88>)
 800329c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032a4:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);//passes call back function for pin high and low which needs to be called during the SPI transfer
 80032a8:	491b      	ldr	r1, [pc, #108]	; (8003318 <initializeW5500+0x8c>)
 80032aa:	481c      	ldr	r0, [pc, #112]	; (800331c <initializeW5500+0x90>)
 80032ac:	f000 f880 	bl	80033b0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);//passes the call back function for read byte and write byte which needs to be called during the SPI transfer
 80032b0:	491b      	ldr	r1, [pc, #108]	; (8003320 <initializeW5500+0x94>)
 80032b2:	481c      	ldr	r0, [pc, #112]	; (8003324 <initializeW5500+0x98>)
 80032b4:	f000 f8a0 	bl	80033f8 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);//initializes the transmit and receive buffer sizes for each socket
 80032b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f910 	bl	80034e8 <wizchip_init>
	wiz_NetInfo netInfo = {};
 80032c8:	f107 0310 	add.w	r3, r7, #16
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
 80032d8:	f8c3 2013 	str.w	r2, [r3, #19]

	memcpy(&netInfo.mac,mac,6);// Mac address
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	6810      	ldr	r0, [r2, #0]
 80032e4:	6018      	str	r0, [r3, #0]
 80032e6:	8892      	ldrh	r2, [r2, #4]
 80032e8:	809a      	strh	r2, [r3, #4]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.ip,ip,4);// IP address
 80032ee:	f8c7 3016 	str.w	r3, [r7, #22]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.sn,sn,4);// Subnet mask
 80032f6:	f8c7 301a 	str.w	r3, [r7, #26]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.gw,gw,4);// Gateway address
 80032fe:	f8c7 301e 	str.w	r3, [r7, #30]

	wizchip_setnetinfo(&netInfo);//sets the configuration of the MAC address, IP address, subnet mask and gateway
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f97a 	bl	8003600 <wizchip_setnetinfo>
	//wizchip_getnetinfo(&netInfo);
}
 800330c:	bf00      	nop
 800330e:	3730      	adds	r7, #48	; 0x30
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08006728 	.word	0x08006728
 8003318:	0800322d 	.word	0x0800322d
 800331c:	08003215 	.word	0x08003215
 8003320:	08003269 	.word	0x08003269
 8003324:	08003245 	.word	0x08003245

08003328 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
 8003390:	2300      	movs	r3, #0
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	71fb      	strb	r3, [r7, #7]
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
	...

080033b0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <reg_wizchip_cs_cbfunc+0x16>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <reg_wizchip_cs_cbfunc+0x3c>)
 80033c8:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <reg_wizchip_cs_cbfunc+0x40>)
 80033ca:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <reg_wizchip_cs_cbfunc+0x3c>)
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <reg_wizchip_cs_cbfunc+0x44>)
 80033d0:	619a      	str	r2, [r3, #24]
 80033d2:	e006      	b.n	80033e2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80033d4:	4a05      	ldr	r2, [pc, #20]	; (80033ec <reg_wizchip_cs_cbfunc+0x3c>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <reg_wizchip_cs_cbfunc+0x3c>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6193      	str	r3, [r2, #24]
   }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	20000010 	.word	0x20000010
 80033f0:	08003341 	.word	0x08003341
 80033f4:	0800334d 	.word	0x0800334d

080033f8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003402:	bf00      	nop
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <reg_wizchip_spi_cbfunc+0x4c>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f9      	beq.n	8003404 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <reg_wizchip_spi_cbfunc+0x24>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d106      	bne.n	800342a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <reg_wizchip_spi_cbfunc+0x4c>)
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <reg_wizchip_spi_cbfunc+0x50>)
 8003420:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <reg_wizchip_spi_cbfunc+0x4c>)
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <reg_wizchip_spi_cbfunc+0x54>)
 8003426:	621a      	str	r2, [r3, #32]
 8003428:	e006      	b.n	8003438 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800342a:	4a06      	ldr	r2, [pc, #24]	; (8003444 <reg_wizchip_spi_cbfunc+0x4c>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <reg_wizchip_spi_cbfunc+0x4c>)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6213      	str	r3, [r2, #32]
   }
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000010 	.word	0x20000010
 8003448:	0800338d 	.word	0x0800338d
 800344c:	0800339b 	.word	0x0800339b

08003450 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2206      	movs	r2, #6
 800345a:	4619      	mov	r1, r3
 800345c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003460:	f7ff fcca 	bl	8002df8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	2204      	movs	r2, #4
 800346a:	4619      	mov	r1, r3
 800346c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003470:	f7ff fcc2 	bl	8002df8 <WIZCHIP_READ_BUF>
 8003474:	f107 0310 	add.w	r3, r7, #16
 8003478:	2204      	movs	r2, #4
 800347a:	4619      	mov	r1, r3
 800347c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003480:	f7ff fcba 	bl	8002df8 <WIZCHIP_READ_BUF>
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	2204      	movs	r2, #4
 800348a:	4619      	mov	r1, r3
 800348c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003490:	f7ff fcb2 	bl	8002df8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	2000      	movs	r0, #0
 8003498:	f7ff fc60 	bl	8002d5c <WIZCHIP_WRITE>
   getMR(); // for delay
 800349c:	2000      	movs	r0, #0
 800349e:	f7ff fc11 	bl	8002cc4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	2206      	movs	r2, #6
 80034a6:	4619      	mov	r1, r3
 80034a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80034ac:	f7ff fd04 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2204      	movs	r2, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034bc:	f7ff fcfc 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80034c0:	f107 0310 	add.w	r3, r7, #16
 80034c4:	2204      	movs	r2, #4
 80034c6:	4619      	mov	r1, r3
 80034c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80034cc:	f7ff fcf4 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	2204      	movs	r2, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80034dc:	f7ff fcec 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80034f6:	f7ff ffab 	bl	8003450 <wizchip_sw_reset>
   if(txsize)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d03b      	beq.n	8003578 <wizchip_init+0x90>
   {
      tmp = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e015      	b.n	8003536 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	7bbb      	ldrb	r3, [r7, #14]
 8003516:	4413      	add	r3, r2
 8003518:	b2db      	uxtb	r3, r3
 800351a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800351c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003520:	2b10      	cmp	r3, #16
 8003522:	dd02      	ble.n	800352a <wizchip_init+0x42>
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	e066      	b.n	80035f8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353a:	2b07      	cmp	r3, #7
 800353c:	dde5      	ble.n	800350a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
 8003542:	e015      	b.n	8003570 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3301      	adds	r3, #1
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003552:	4618      	mov	r0, r3
 8003554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	f7ff fbfc 	bl	8002d5c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	3301      	adds	r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003574:	2b07      	cmp	r3, #7
 8003576:	dde5      	ble.n	8003544 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03b      	beq.n	80035f6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e015      	b.n	80035b4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	7bbb      	ldrb	r3, [r7, #14]
 8003594:	4413      	add	r3, r2
 8003596:	b2db      	uxtb	r3, r3
 8003598:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800359a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800359e:	2b10      	cmp	r3, #16
 80035a0:	dd02      	ble.n	80035a8 <wizchip_init+0xc0>
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	e027      	b.n	80035f8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b8:	2b07      	cmp	r3, #7
 80035ba:	dde5      	ble.n	8003588 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e015      	b.n	80035ee <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3301      	adds	r3, #1
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80035d0:	4618      	mov	r0, r3
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4619      	mov	r1, r3
 80035de:	f7ff fbbd 	bl	8002d5c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	dde5      	ble.n	80035c2 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2206      	movs	r2, #6
 800360c:	4619      	mov	r1, r3
 800360e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003612:	f7ff fc51 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	330e      	adds	r3, #14
 800361a:	2204      	movs	r2, #4
 800361c:	4619      	mov	r1, r3
 800361e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003622:	f7ff fc49 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	330a      	adds	r3, #10
 800362a:	2204      	movs	r2, #4
 800362c:	4619      	mov	r1, r3
 800362e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003632:	f7ff fc41 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3306      	adds	r3, #6
 800363a:	2204      	movs	r2, #4
 800363c:	4619      	mov	r1, r3
 800363e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003642:	f7ff fc39 	bl	8002eb8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7c9a      	ldrb	r2, [r3, #18]
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <wizchip_setnetinfo+0x78>)
 800364c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7cda      	ldrb	r2, [r3, #19]
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <wizchip_setnetinfo+0x78>)
 8003654:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7d1a      	ldrb	r2, [r3, #20]
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <wizchip_setnetinfo+0x78>)
 800365c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7d5a      	ldrb	r2, [r3, #21]
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <wizchip_setnetinfo+0x78>)
 8003664:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7d9a      	ldrb	r2, [r3, #22]
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <wizchip_setnetinfo+0x7c>)
 800366c:	701a      	strb	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000a40 	.word	0x20000a40
 800367c:	20000a44 	.word	0x20000a44

08003680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003680:	f7ff fb1a 	bl	8002cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003684:	480b      	ldr	r0, [pc, #44]	; (80036b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003686:	490c      	ldr	r1, [pc, #48]	; (80036b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003688:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800369c:	4c09      	ldr	r4, [pc, #36]	; (80036c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036aa:	f002 faf3 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ae:	f7fe f9ff 	bl	8001ab0 <main>
  bx lr
 80036b2:	4770      	bx	lr
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80036bc:	08006790 	.word	0x08006790
  ldr r2, =_sbss
 80036c0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80036c4:	20000a5c 	.word	0x20000a5c

080036c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC1_2_IRQHandler>
	...

080036cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_Init+0x28>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_Init+0x28>)
 80036d6:	f043 0310 	orr.w	r3, r3, #16
 80036da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f000 f947 	bl	8003970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e2:	200f      	movs	r0, #15
 80036e4:	f000 f808 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e8:	f7ff f9d4 	bl	8002a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000

080036f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_InitTick+0x54>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x58>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800370e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f95f 	bl	80039da <HAL_SYSTICK_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00e      	b.n	8003744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d80a      	bhi.n	8003742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372c:	2200      	movs	r2, #0
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f000 f927 	bl	8003986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_InitTick+0x5c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	2000000c 	.word	0x2000000c
 8003750:	20000040 	.word	0x20000040
 8003754:	2000003c 	.word	0x2000003c

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_IncTick+0x1c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x20>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <HAL_IncTick+0x20>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000040 	.word	0x20000040
 8003778:	20000a48 	.word	0x20000a48

0800377c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_GetTick+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000a48 	.word	0x20000a48

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff fff0 	bl	800377c <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Delay+0x44>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037b6:	bf00      	nop
 80037b8:	f7ff ffe0 	bl	800377c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000040 	.word	0x20000040

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0b      	blt.n	8003866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4906      	ldr	r1, [pc, #24]	; (8003870 <__NVIC_EnableIRQ+0x34>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393c:	d301      	bcc.n	8003942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393e:	2301      	movs	r3, #1
 8003940:	e00f      	b.n	8003962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <SysTick_Config+0x40>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394a:	210f      	movs	r1, #15
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f7ff ff90 	bl	8003874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <SysTick_Config+0x40>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <SysTick_Config+0x40>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff2d 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff42 	bl	8003820 <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff90 	bl	80038c8 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5f 	bl	8003874 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff35 	bl	800383c <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa2 	bl	800392c <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d005      	beq.n	8003a18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e051      	b.n	8003abc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 020e 	bic.w	r2, r2, #14
 8003a26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <HAL_DMA_Abort_IT+0xd4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d029      	beq.n	8003a96 <HAL_DMA_Abort_IT+0xa2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <HAL_DMA_Abort_IT+0xd8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x9e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_DMA_Abort_IT+0xdc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01a      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x98>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <HAL_DMA_Abort_IT+0xe0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d012      	beq.n	8003a86 <HAL_DMA_Abort_IT+0x92>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_DMA_Abort_IT+0xe4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00a      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x8c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_DMA_Abort_IT+0xe8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d102      	bne.n	8003a7a <HAL_DMA_Abort_IT+0x86>
 8003a74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a78:	e00e      	b.n	8003a98 <HAL_DMA_Abort_IT+0xa4>
 8003a7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a7e:	e00b      	b.n	8003a98 <HAL_DMA_Abort_IT+0xa4>
 8003a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a84:	e008      	b.n	8003a98 <HAL_DMA_Abort_IT+0xa4>
 8003a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8a:	e005      	b.n	8003a98 <HAL_DMA_Abort_IT+0xa4>
 8003a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a90:	e002      	b.n	8003a98 <HAL_DMA_Abort_IT+0xa4>
 8003a92:	2310      	movs	r3, #16
 8003a94:	e000      	b.n	8003a98 <HAL_DMA_Abort_IT+0xa4>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <HAL_DMA_Abort_IT+0xec>)
 8003a9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
    } 
  }
  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40020008 	.word	0x40020008
 8003acc:	4002001c 	.word	0x4002001c
 8003ad0:	40020030 	.word	0x40020030
 8003ad4:	40020044 	.word	0x40020044
 8003ad8:	40020058 	.word	0x40020058
 8003adc:	4002006c 	.word	0x4002006c
 8003ae0:	40020000 	.word	0x40020000

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b08b      	sub	sp, #44	; 0x2c
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af6:	e169      	b.n	8003dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003af8:	2201      	movs	r2, #1
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	f040 8158 	bne.w	8003dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a9a      	ldr	r2, [pc, #616]	; (8003d84 <HAL_GPIO_Init+0x2a0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d05e      	beq.n	8003bde <HAL_GPIO_Init+0xfa>
 8003b20:	4a98      	ldr	r2, [pc, #608]	; (8003d84 <HAL_GPIO_Init+0x2a0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d875      	bhi.n	8003c12 <HAL_GPIO_Init+0x12e>
 8003b26:	4a98      	ldr	r2, [pc, #608]	; (8003d88 <HAL_GPIO_Init+0x2a4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d058      	beq.n	8003bde <HAL_GPIO_Init+0xfa>
 8003b2c:	4a96      	ldr	r2, [pc, #600]	; (8003d88 <HAL_GPIO_Init+0x2a4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d86f      	bhi.n	8003c12 <HAL_GPIO_Init+0x12e>
 8003b32:	4a96      	ldr	r2, [pc, #600]	; (8003d8c <HAL_GPIO_Init+0x2a8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d052      	beq.n	8003bde <HAL_GPIO_Init+0xfa>
 8003b38:	4a94      	ldr	r2, [pc, #592]	; (8003d8c <HAL_GPIO_Init+0x2a8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d869      	bhi.n	8003c12 <HAL_GPIO_Init+0x12e>
 8003b3e:	4a94      	ldr	r2, [pc, #592]	; (8003d90 <HAL_GPIO_Init+0x2ac>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d04c      	beq.n	8003bde <HAL_GPIO_Init+0xfa>
 8003b44:	4a92      	ldr	r2, [pc, #584]	; (8003d90 <HAL_GPIO_Init+0x2ac>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d863      	bhi.n	8003c12 <HAL_GPIO_Init+0x12e>
 8003b4a:	4a92      	ldr	r2, [pc, #584]	; (8003d94 <HAL_GPIO_Init+0x2b0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d046      	beq.n	8003bde <HAL_GPIO_Init+0xfa>
 8003b50:	4a90      	ldr	r2, [pc, #576]	; (8003d94 <HAL_GPIO_Init+0x2b0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d85d      	bhi.n	8003c12 <HAL_GPIO_Init+0x12e>
 8003b56:	2b12      	cmp	r3, #18
 8003b58:	d82a      	bhi.n	8003bb0 <HAL_GPIO_Init+0xcc>
 8003b5a:	2b12      	cmp	r3, #18
 8003b5c:	d859      	bhi.n	8003c12 <HAL_GPIO_Init+0x12e>
 8003b5e:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <HAL_GPIO_Init+0x80>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003bdf 	.word	0x08003bdf
 8003b68:	08003bb9 	.word	0x08003bb9
 8003b6c:	08003bcb 	.word	0x08003bcb
 8003b70:	08003c0d 	.word	0x08003c0d
 8003b74:	08003c13 	.word	0x08003c13
 8003b78:	08003c13 	.word	0x08003c13
 8003b7c:	08003c13 	.word	0x08003c13
 8003b80:	08003c13 	.word	0x08003c13
 8003b84:	08003c13 	.word	0x08003c13
 8003b88:	08003c13 	.word	0x08003c13
 8003b8c:	08003c13 	.word	0x08003c13
 8003b90:	08003c13 	.word	0x08003c13
 8003b94:	08003c13 	.word	0x08003c13
 8003b98:	08003c13 	.word	0x08003c13
 8003b9c:	08003c13 	.word	0x08003c13
 8003ba0:	08003c13 	.word	0x08003c13
 8003ba4:	08003c13 	.word	0x08003c13
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bd5 	.word	0x08003bd5
 8003bb0:	4a79      	ldr	r2, [pc, #484]	; (8003d98 <HAL_GPIO_Init+0x2b4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bb6:	e02c      	b.n	8003c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	623b      	str	r3, [r7, #32]
          break;
 8003bbe:	e029      	b.n	8003c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	623b      	str	r3, [r7, #32]
          break;
 8003bc8:	e024      	b.n	8003c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	3308      	adds	r3, #8
 8003bd0:	623b      	str	r3, [r7, #32]
          break;
 8003bd2:	e01f      	b.n	8003c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	623b      	str	r3, [r7, #32]
          break;
 8003bdc:	e01a      	b.n	8003c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003be6:	2304      	movs	r3, #4
 8003be8:	623b      	str	r3, [r7, #32]
          break;
 8003bea:	e013      	b.n	8003c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d105      	bne.n	8003c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	611a      	str	r2, [r3, #16]
          break;
 8003bfe:	e009      	b.n	8003c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c00:	2308      	movs	r3, #8
 8003c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	615a      	str	r2, [r3, #20]
          break;
 8003c0a:	e003      	b.n	8003c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
          break;
 8003c10:	e000      	b.n	8003c14 <HAL_GPIO_Init+0x130>
          break;
 8003c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2bff      	cmp	r3, #255	; 0xff
 8003c18:	d801      	bhi.n	8003c1e <HAL_GPIO_Init+0x13a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	e001      	b.n	8003c22 <HAL_GPIO_Init+0x13e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2bff      	cmp	r3, #255	; 0xff
 8003c28:	d802      	bhi.n	8003c30 <HAL_GPIO_Init+0x14c>
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	e002      	b.n	8003c36 <HAL_GPIO_Init+0x152>
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	3b08      	subs	r3, #8
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	210f      	movs	r1, #15
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	fa01 f303 	lsl.w	r3, r1, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	401a      	ands	r2, r3
 8003c48:	6a39      	ldr	r1, [r7, #32]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	431a      	orrs	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80b1 	beq.w	8003dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c64:	4b4d      	ldr	r3, [pc, #308]	; (8003d9c <HAL_GPIO_Init+0x2b8>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	4a4c      	ldr	r2, [pc, #304]	; (8003d9c <HAL_GPIO_Init+0x2b8>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6193      	str	r3, [r2, #24]
 8003c70:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_GPIO_Init+0x2b8>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c7c:	4a48      	ldr	r2, [pc, #288]	; (8003da0 <HAL_GPIO_Init+0x2bc>)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	220f      	movs	r2, #15
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a40      	ldr	r2, [pc, #256]	; (8003da4 <HAL_GPIO_Init+0x2c0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <HAL_GPIO_Init+0x1ec>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a3f      	ldr	r2, [pc, #252]	; (8003da8 <HAL_GPIO_Init+0x2c4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00d      	beq.n	8003ccc <HAL_GPIO_Init+0x1e8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3e      	ldr	r2, [pc, #248]	; (8003dac <HAL_GPIO_Init+0x2c8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <HAL_GPIO_Init+0x1e4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3d      	ldr	r2, [pc, #244]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_GPIO_Init+0x1e0>
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e006      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	e004      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e002      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	f002 0203 	and.w	r2, r2, #3
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	4093      	lsls	r3, r2
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ce2:	492f      	ldr	r1, [pc, #188]	; (8003da0 <HAL_GPIO_Init+0x2bc>)
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	492c      	ldr	r1, [pc, #176]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]
 8003d08:	e006      	b.n	8003d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d0a:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	4928      	ldr	r1, [pc, #160]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4922      	ldr	r1, [pc, #136]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60cb      	str	r3, [r1, #12]
 8003d30:	e006      	b.n	8003d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	491e      	ldr	r1, [pc, #120]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d006      	beq.n	8003d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4918      	ldr	r1, [pc, #96]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	4914      	ldr	r1, [pc, #80]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d021      	beq.n	8003db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	490e      	ldr	r1, [pc, #56]	; (8003db4 <HAL_GPIO_Init+0x2d0>)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e021      	b.n	8003dc6 <HAL_GPIO_Init+0x2e2>
 8003d82:	bf00      	nop
 8003d84:	10320000 	.word	0x10320000
 8003d88:	10310000 	.word	0x10310000
 8003d8c:	10220000 	.word	0x10220000
 8003d90:	10210000 	.word	0x10210000
 8003d94:	10120000 	.word	0x10120000
 8003d98:	10110000 	.word	0x10110000
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40010800 	.word	0x40010800
 8003da8:	40010c00 	.word	0x40010c00
 8003dac:	40011000 	.word	0x40011000
 8003db0:	40011400 	.word	0x40011400
 8003db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_GPIO_Init+0x304>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	4909      	ldr	r1, [pc, #36]	; (8003de8 <HAL_GPIO_Init+0x304>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	3301      	adds	r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f47f ae8e 	bne.w	8003af8 <HAL_GPIO_Init+0x14>
  }
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	372c      	adds	r7, #44	; 0x2c
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	40010400 	.word	0x40010400

08003dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e001      	b.n	8003e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	807b      	strh	r3, [r7, #2]
 8003e26:	4613      	mov	r3, r2
 8003e28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e2a:	787b      	ldrb	r3, [r7, #1]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e30:	887a      	ldrh	r2, [r7, #2]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e36:	e003      	b.n	8003e40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	041a      	lsls	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	611a      	str	r2, [r3, #16]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e5c:	887a      	ldrh	r2, [r7, #2]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4013      	ands	r3, r2
 8003e62:	041a      	lsls	r2, r3, #16
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	43d9      	mvns	r1, r3
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	400b      	ands	r3, r1
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	611a      	str	r2, [r3, #16]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd fdd8 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40010400 	.word	0x40010400

08003eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e272      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8087 	beq.w	8003fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ecc:	4b92      	ldr	r3, [pc, #584]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d00c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ed8:	4b8f      	ldr	r3, [pc, #572]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d112      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5e>
 8003ee4:	4b8c      	ldr	r3, [pc, #560]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef2:	4b89      	ldr	r3, [pc, #548]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d06c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x12c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d168      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e24c      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f12:	d106      	bne.n	8003f22 <HAL_RCC_OscConfig+0x76>
 8003f14:	4b80      	ldr	r3, [pc, #512]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7f      	ldr	r2, [pc, #508]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e02e      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x98>
 8003f2a:	4b7b      	ldr	r3, [pc, #492]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7a      	ldr	r2, [pc, #488]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b78      	ldr	r3, [pc, #480]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a77      	ldr	r2, [pc, #476]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e01d      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0xbc>
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a71      	ldr	r2, [pc, #452]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f68:	4b6b      	ldr	r3, [pc, #428]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6a      	ldr	r2, [pc, #424]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b68      	ldr	r3, [pc, #416]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a67      	ldr	r2, [pc, #412]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7ff fbf8 	bl	800377c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7ff fbf4 	bl	800377c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e200      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0xe4>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7ff fbe4 	bl	800377c <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7ff fbe0 	bl	800377c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1ec      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	4b53      	ldr	r3, [pc, #332]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x10c>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d063      	beq.n	80040ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe6:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ff2:	4b49      	ldr	r3, [pc, #292]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x18c>
 8003ffe:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x176>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e1c0      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4939      	ldr	r1, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	e03a      	b.n	80040ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7ff fb99 	bl	800377c <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7ff fb95 	bl	800377c <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1a1      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4927      	ldr	r1, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	e015      	b.n	80040ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7ff fb78 	bl	800377c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004090:	f7ff fb74 	bl	800377c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e180      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d03a      	beq.n	8004130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d019      	beq.n	80040f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c8:	f7ff fb58 	bl	800377c <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d0:	f7ff fb54 	bl	800377c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e160      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ee:	2001      	movs	r0, #1
 80040f0:	f000 fa9c 	bl	800462c <RCC_Delay>
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fc:	f7ff fb3e 	bl	800377c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004102:	e00f      	b.n	8004124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004104:	f7ff fb3a 	bl	800377c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d908      	bls.n	8004124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e146      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	42420000 	.word	0x42420000
 8004120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e9      	bne.n	8004104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a6 	beq.w	800428a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b8b      	ldr	r3, [pc, #556]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	4a87      	ldr	r2, [pc, #540]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	61d3      	str	r3, [r2, #28]
 800415a:	4b85      	ldr	r3, [pc, #532]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b82      	ldr	r3, [pc, #520]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004176:	4b7f      	ldr	r3, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7e      	ldr	r2, [pc, #504]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7ff fafb 	bl	800377c <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7ff faf7 	bl	800377c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b64      	cmp	r3, #100	; 0x64
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e103      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b75      	ldr	r3, [pc, #468]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x312>
 80041b0:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4a6e      	ldr	r2, [pc, #440]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6213      	str	r3, [r2, #32]
 80041bc:	e02d      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x334>
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4a69      	ldr	r2, [pc, #420]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6213      	str	r3, [r2, #32]
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4a66      	ldr	r2, [pc, #408]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	6213      	str	r3, [r2, #32]
 80041de:	e01c      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d10c      	bne.n	8004202 <HAL_RCC_OscConfig+0x356>
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a60      	ldr	r2, [pc, #384]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	f043 0304 	orr.w	r3, r3, #4
 80041f2:	6213      	str	r3, [r2, #32]
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a5d      	ldr	r2, [pc, #372]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6213      	str	r3, [r2, #32]
 8004200:	e00b      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 8004202:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a5a      	ldr	r2, [pc, #360]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6213      	str	r3, [r2, #32]
 800420e:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a57      	ldr	r2, [pc, #348]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d015      	beq.n	800424e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004222:	f7ff faab 	bl	800377c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7ff faa7 	bl	800377c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0b1      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCC_OscConfig+0x37e>
 800424c:	e014      	b.n	8004278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7ff fa95 	bl	800377c <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7ff fa91 	bl	800377c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e09b      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426c:	4b40      	ldr	r3, [pc, #256]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ee      	bne.n	8004256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4a3b      	ldr	r2, [pc, #236]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8087 	beq.w	80043a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d061      	beq.n	8004364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d146      	bne.n	8004336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7ff fa65 	bl	800377c <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7ff fa61 	bl	800377c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e06d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d108      	bne.n	80042f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4921      	ldr	r1, [pc, #132]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f0:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a19      	ldr	r1, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	491b      	ldr	r1, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7ff fa35 	bl	800377c <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7ff fa31 	bl	800377c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e03d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x46a>
 8004334:	e035      	b.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7ff fa1e 	bl	800377c <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7ff fa1a 	bl	800377c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e026      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x498>
 8004362:	e01e      	b.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d107      	bne.n	800437c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e019      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
 8004370:	40021000 	.word	0x40021000
 8004374:	40007000 	.word	0x40007000
 8004378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	429a      	cmp	r2, r3
 800438e:	d106      	bne.n	800439e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000

080043b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0d0      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b67      	ldr	r3, [pc, #412]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4965      	ldr	r1, [pc, #404]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800442e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d040      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d115      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e073      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447e:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e06b      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4936      	ldr	r1, [pc, #216]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a0:	f7ff f96c 	bl	800377c <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7ff f968 	bl	800377c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e053      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d210      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 0207 	bic.w	r2, r3, #7
 80044e6:	4922      	ldr	r1, [pc, #136]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e032      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800453e:	f000 f821 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8004542:	4602      	mov	r2, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	490a      	ldr	r1, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1cc>)
 8004558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1d0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff f8ca 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40022000 	.word	0x40022000
 8004574:	40021000 	.word	0x40021000
 8004578:	08006730 	.word	0x08006730
 800457c:	2000000c 	.word	0x2000000c
 8004580:	2000003c 	.word	0x2000003c

08004584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_RCC_GetSysClockFreq+0x94>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d002      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x30>
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x36>
 80045b2:	e027      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 80045b6:	613b      	str	r3, [r7, #16]
      break;
 80045b8:	e027      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0c9b      	lsrs	r3, r3, #18
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045c4:	5cd3      	ldrb	r3, [r2, r3]
 80045c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_GetSysClockFreq+0x94>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	0c5b      	lsrs	r3, r3, #17
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045de:	5cd3      	ldrb	r3, [r2, r3]
 80045e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 80045e6:	fb03 f202 	mul.w	r2, r3, r2
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e004      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0c      	ldr	r2, [pc, #48]	; (8004628 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	613b      	str	r3, [r7, #16]
      break;
 8004602:	e002      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 8004606:	613b      	str	r3, [r7, #16]
      break;
 8004608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460a:	693b      	ldr	r3, [r7, #16]
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	007a1200 	.word	0x007a1200
 8004620:	08006740 	.word	0x08006740
 8004624:	08006750 	.word	0x08006750
 8004628:	003d0900 	.word	0x003d0900

0800462c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <RCC_Delay+0x34>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <RCC_Delay+0x38>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	0a5b      	lsrs	r3, r3, #9
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004648:	bf00      	nop
  }
  while (Delay --);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	60fa      	str	r2, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f9      	bne.n	8004648 <RCC_Delay+0x1c>
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	2000000c 	.word	0x2000000c
 8004664:	10624dd3 	.word	0x10624dd3

08004668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e076      	b.n	8004768 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800468a:	d009      	beq.n	80046a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
 8004692:	e005      	b.n	80046a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe fa0c 	bl	8002ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	ea42 0103 	orr.w	r1, r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	0c1a      	lsrs	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f002 0204 	and.w	r2, r2, #4
 8004746:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004756:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_SPI_Transmit+0x22>
 800478e:	2302      	movs	r3, #2
 8004790:	e12d      	b.n	80049ee <HAL_SPI_Transmit+0x27e>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479a:	f7fe ffef 	bl	800377c <HAL_GetTick>
 800479e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
 80047b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047b4:	e116      	b.n	80049e4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_SPI_Transmit+0x52>
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c6:	e10d      	b.n	80049e4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2203      	movs	r2, #3
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480e:	d10f      	bne.n	8004830 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800482e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d007      	beq.n	800484e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800484c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004856:	d14f      	bne.n	80048f8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_SPI_Transmit+0xf6>
 8004860:	8afb      	ldrh	r3, [r7, #22]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d142      	bne.n	80048ec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800488a:	e02f      	b.n	80048ec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b02      	cmp	r3, #2
 8004898:	d112      	bne.n	80048c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	881a      	ldrh	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	1c9a      	adds	r2, r3, #2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80048be:	e015      	b.n	80048ec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c0:	f7fe ff5c 	bl	800377c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d803      	bhi.n	80048d8 <HAL_SPI_Transmit+0x168>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d102      	bne.n	80048de <HAL_SPI_Transmit+0x16e>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048ea:	e07b      	b.n	80049e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ca      	bne.n	800488c <HAL_SPI_Transmit+0x11c>
 80048f6:	e050      	b.n	800499a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_SPI_Transmit+0x196>
 8004900:	8afb      	ldrh	r3, [r7, #22]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d144      	bne.n	8004990 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800492c:	e030      	b.n	8004990 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d113      	bne.n	8004964 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	86da      	strh	r2, [r3, #54]	; 0x36
 8004962:	e015      	b.n	8004990 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004964:	f7fe ff0a 	bl	800377c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d803      	bhi.n	800497c <HAL_SPI_Transmit+0x20c>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d102      	bne.n	8004982 <HAL_SPI_Transmit+0x212>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800498e:	e029      	b.n	80049e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1c9      	bne.n	800492e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fcd0 	bl	8005344 <SPI_EndRxTxTransaction>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e003      	b.n	80049e4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b088      	sub	sp, #32
 80049fa:	af02      	add	r7, sp, #8
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d002      	beq.n	8004a1c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
 8004a18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a1a:	e0fb      	b.n	8004c14 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a24:	d112      	bne.n	8004a4c <HAL_SPI_Receive+0x56>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10e      	bne.n	8004a4c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2204      	movs	r2, #4
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f8ef 	bl	8004c26 <HAL_SPI_TransmitReceive>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	e0e8      	b.n	8004c1e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_SPI_Receive+0x64>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0e1      	b.n	8004c1e <HAL_SPI_Receive+0x228>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a62:	f7fe fe8b 	bl	800377c <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Receive+0x7e>
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a78:	e0cc      	b.n	8004c14 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac0:	d10f      	bne.n	8004ae2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ae0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d007      	beq.n	8004b00 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d16a      	bne.n	8004bde <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b08:	e032      	b.n	8004b70 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d115      	bne.n	8004b44 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f103 020c 	add.w	r2, r3, #12
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b42:	e015      	b.n	8004b70 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b44:	f7fe fe1a 	bl	800377c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d803      	bhi.n	8004b5c <HAL_SPI_Receive+0x166>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d102      	bne.n	8004b62 <HAL_SPI_Receive+0x16c>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b6e:	e051      	b.n	8004c14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1c7      	bne.n	8004b0a <HAL_SPI_Receive+0x114>
 8004b7a:	e035      	b.n	8004be8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d113      	bne.n	8004bb2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	b292      	uxth	r2, r2
 8004b96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb0:	e015      	b.n	8004bde <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb2:	f7fe fde3 	bl	800377c <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d803      	bhi.n	8004bca <HAL_SPI_Receive+0x1d4>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Receive+0x1da>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bdc:	e01a      	b.n	8004c14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1c9      	bne.n	8004b7c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fb57 	bl	80052a0 <SPI_EndRxTransaction>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
 8004c0a:	e003      	b.n	8004c14 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b08c      	sub	sp, #48	; 0x30
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c34:	2301      	movs	r3, #1
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x26>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e198      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x358>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c54:	f7fe fd92 	bl	800377c <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d00f      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x70>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7c:	d107      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x68>
 8004c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d003      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c94:	e16d      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x82>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x82>
 8004ca2:	887b      	ldrh	r3, [r7, #2]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cae:	e160      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d003      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2205      	movs	r2, #5
 8004cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	887a      	ldrh	r2, [r7, #2]
 8004cec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d007      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d20:	d17c      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_TransmitReceive+0x10a>
 8004d2a:	8b7b      	ldrh	r3, [r7, #26]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d16a      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d54:	e057      	b.n	8004e06 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d11b      	bne.n	8004d9c <HAL_SPI_TransmitReceive+0x176>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x176>
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d113      	bne.n	8004d9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	1c9a      	adds	r2, r3, #2
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d119      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x1b8>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d014      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	b292      	uxth	r2, r2
 8004dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	1c9a      	adds	r2, r3, #2
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dde:	f7fe fccd 	bl	800377c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d80b      	bhi.n	8004e06 <HAL_SPI_TransmitReceive+0x1e0>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d007      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e04:	e0b5      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1a2      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x130>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d19d      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x130>
 8004e1a:	e080      	b.n	8004f1e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x204>
 8004e24:	8b7b      	ldrh	r3, [r7, #26]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d16f      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e50:	e05b      	b.n	8004f0a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d11c      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x274>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x274>
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d114      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	7812      	ldrb	r2, [r2, #0]
 8004e7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d119      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x2b6>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d014      	beq.n	8004edc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004edc:	f7fe fc4e 	bl	800377c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d803      	bhi.n	8004ef4 <HAL_SPI_TransmitReceive+0x2ce>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d102      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x2d4>
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d107      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f08:	e033      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d19e      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x22c>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d199      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fa0e 	bl	8005344 <SPI_EndRxTxTransaction>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d006      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f3a:	e01a      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f68:	e003      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3730      	adds	r7, #48	; 0x30
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	099b      	lsrs	r3, r3, #6
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
    return;
 8004fca:	e0be      	b.n	800514a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_SPI_IRQHandler+0x66>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	09db      	lsrs	r3, r3, #7
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
    return;
 8004fec:	e0ad      	b.n	800514a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_SPI_IRQHandler+0x80>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	099b      	lsrs	r3, r3, #6
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a1 	beq.w	800514a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 809a 	beq.w	800514a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	099b      	lsrs	r3, r3, #6
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d023      	beq.n	800506a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d011      	beq.n	8005052 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	e00b      	b.n	800506a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]
        return;
 8005068:	e06f      	b.n	800514a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d014      	beq.n	80050a0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	f043 0201 	orr.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d04f      	beq.n	8005148 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <HAL_SPI_IRQHandler+0x14c>
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d034      	beq.n	800513e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0203 	bic.w	r2, r2, #3
 80050e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d011      	beq.n	8005110 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f0:	4a17      	ldr	r2, [pc, #92]	; (8005150 <HAL_SPI_IRQHandler+0x1c8>)
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fe fc7b 	bl	80039f4 <HAL_DMA_Abort_IT>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005114:	2b00      	cmp	r3, #0
 8005116:	d016      	beq.n	8005146 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511c:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <HAL_SPI_IRQHandler+0x1c8>)
 800511e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fc65 	bl	80039f4 <HAL_DMA_Abort_IT>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800513c:	e003      	b.n	8005146 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f808 	bl	8005154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005144:	e000      	b.n	8005148 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005146:	bf00      	nop
    return;
 8005148:	bf00      	nop
  }
}
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	08005167 	.word	0x08005167

08005154 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ffe7 	bl	8005154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051a0:	f7fe faec 	bl	800377c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	4413      	add	r3, r2
 80051ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051b0:	f7fe fae4 	bl	800377c <HAL_GetTick>
 80051b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051b6:	4b39      	ldr	r3, [pc, #228]	; (800529c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	015b      	lsls	r3, r3, #5
 80051bc:	0d1b      	lsrs	r3, r3, #20
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051c6:	e054      	b.n	8005272 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d050      	beq.n	8005272 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051d0:	f7fe fad4 	bl	800377c <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d902      	bls.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d13d      	bne.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fe:	d111      	bne.n	8005224 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005208:	d004      	beq.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005212:	d107      	bne.n	8005224 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522c:	d10f      	bne.n	800524e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800524c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e017      	b.n	8005292 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3b01      	subs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	429a      	cmp	r2, r3
 800528e:	d19b      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	2000000c 	.word	0x2000000c

080052a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b4:	d111      	bne.n	80052da <SPI_EndRxTransaction+0x3a>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052be:	d004      	beq.n	80052ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c8:	d107      	bne.n	80052da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e2:	d117      	bne.n	8005314 <SPI_EndRxTransaction+0x74>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ec:	d112      	bne.n	8005314 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2101      	movs	r1, #1
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff ff49 	bl	8005190 <SPI_WaitFlagStateUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01a      	beq.n	800533a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e013      	b.n	800533c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ff36 	bl	8005190 <SPI_WaitFlagStateUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e000      	b.n	800533c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2200      	movs	r2, #0
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff ff18 	bl	8005190 <SPI_WaitFlagStateUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e000      	b.n	8005378 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e041      	b.n	8005416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fd fbe8 	bl	8002b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 fafa 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e03a      	b.n	80054ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <HAL_TIM_Base_Start_IT+0x98>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x58>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d009      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x58>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a14      	ldr	r2, [pc, #80]	; (80054bc <HAL_TIM_Base_Start_IT+0x9c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x58>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d111      	bne.n	800549c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b06      	cmp	r3, #6
 8005488:	d010      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	e007      	b.n	80054ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800

080054c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6a1a      	ldr	r2, [r3, #32]
 80054e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10f      	bne.n	800550c <HAL_TIM_Base_Stop_IT+0x48>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	f240 4344 	movw	r3, #1092	; 0x444
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d107      	bne.n	800550c <HAL_TIM_Base_Stop_IT+0x48>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e041      	b.n	80055b8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f839 	bl	80055c0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f000 fa29 	bl	80059b8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0208 	bic.w	r2, r2, #8
 8005574:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr

080055d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d122      	bne.n	800562e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d11b      	bne.n	800562e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f06f 0202 	mvn.w	r2, #2
 80055fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f9b4 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 800561a:	e005      	b.n	8005628 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9a7 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9b6 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d122      	bne.n	8005682 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d11b      	bne.n	8005682 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f06f 0204 	mvn.w	r2, #4
 8005652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f98a 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 800566e:	e005      	b.n	800567c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f97d 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f98c 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d122      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d11b      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f06f 0208 	mvn.w	r2, #8
 80056a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2204      	movs	r2, #4
 80056ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f960 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 80056c2:	e005      	b.n	80056d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f953 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f962 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d122      	bne.n	800572a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d11b      	bne.n	800572a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0210 	mvn.w	r2, #16
 80056fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2208      	movs	r2, #8
 8005700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f936 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 8005716:	e005      	b.n	8005724 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f929 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f938 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10e      	bne.n	8005756 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d107      	bne.n	8005756 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f06f 0201 	mvn.w	r2, #1
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7fc f95b 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d10e      	bne.n	8005782 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fa7a 	bl	8005c76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d10e      	bne.n	80057ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f8fc 	bl	80059a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d10e      	bne.n	80057da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d107      	bne.n	80057da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0220 	mvn.w	r2, #32
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa45 	bl	8005c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_ConfigClockSource+0x1c>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e0b4      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x186>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800581c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005824:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005836:	d03e      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0xd4>
 8005838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583c:	f200 8087 	bhi.w	800594e <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005844:	f000 8086 	beq.w	8005954 <HAL_TIM_ConfigClockSource+0x172>
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	d87f      	bhi.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
 800584e:	2b70      	cmp	r3, #112	; 0x70
 8005850:	d01a      	beq.n	8005888 <HAL_TIM_ConfigClockSource+0xa6>
 8005852:	2b70      	cmp	r3, #112	; 0x70
 8005854:	d87b      	bhi.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
 8005856:	2b60      	cmp	r3, #96	; 0x60
 8005858:	d050      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0x11a>
 800585a:	2b60      	cmp	r3, #96	; 0x60
 800585c:	d877      	bhi.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
 800585e:	2b50      	cmp	r3, #80	; 0x50
 8005860:	d03c      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0xfa>
 8005862:	2b50      	cmp	r3, #80	; 0x50
 8005864:	d873      	bhi.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d058      	beq.n	800591c <HAL_TIM_ConfigClockSource+0x13a>
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d86f      	bhi.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
 800586e:	2b30      	cmp	r3, #48	; 0x30
 8005870:	d064      	beq.n	800593c <HAL_TIM_ConfigClockSource+0x15a>
 8005872:	2b30      	cmp	r3, #48	; 0x30
 8005874:	d86b      	bhi.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
 8005876:	2b20      	cmp	r3, #32
 8005878:	d060      	beq.n	800593c <HAL_TIM_ConfigClockSource+0x15a>
 800587a:	2b20      	cmp	r3, #32
 800587c:	d867      	bhi.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d05c      	beq.n	800593c <HAL_TIM_ConfigClockSource+0x15a>
 8005882:	2b10      	cmp	r3, #16
 8005884:	d05a      	beq.n	800593c <HAL_TIM_ConfigClockSource+0x15a>
 8005886:	e062      	b.n	800594e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6899      	ldr	r1, [r3, #8]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f000 f967 	bl	8005b6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
      break;
 80058b4:	e04f      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6899      	ldr	r1, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f000 f950 	bl	8005b6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058d8:	609a      	str	r2, [r3, #8]
      break;
 80058da:	e03c      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	461a      	mov	r2, r3
 80058ea:	f000 f8c7 	bl	8005a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2150      	movs	r1, #80	; 0x50
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f91e 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 80058fa:	e02c      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6859      	ldr	r1, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	461a      	mov	r2, r3
 800590a:	f000 f8e5 	bl	8005ad8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2160      	movs	r1, #96	; 0x60
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f90e 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 800591a:	e01c      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6859      	ldr	r1, [r3, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	461a      	mov	r2, r3
 800592a:	f000 f8a7 	bl	8005a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2140      	movs	r1, #64	; 0x40
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f8fe 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 800593a:	e00c      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 f8f5 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 800594c:	e003      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
      break;
 8005952:	e000      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005954:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <TIM_Base_SetConfig+0xb8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <TIM_Base_SetConfig+0x30>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d007      	beq.n	80059e8 <TIM_Base_SetConfig+0x30>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <TIM_Base_SetConfig+0xbc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_Base_SetConfig+0x30>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <TIM_Base_SetConfig+0xc0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d108      	bne.n	80059fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <TIM_Base_SetConfig+0xb8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0x62>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0x62>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <TIM_Base_SetConfig+0xbc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0x62>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <TIM_Base_SetConfig+0xc0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a07      	ldr	r2, [pc, #28]	; (8005a70 <TIM_Base_SetConfig+0xb8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d103      	bne.n	8005a60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	615a      	str	r2, [r3, #20]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40000400 	.word	0x40000400
 8005a78:	40000800 	.word	0x40000800

08005a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0201 	bic.w	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 030a 	bic.w	r3, r3, #10
 8005ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0210 	bic.w	r2, r3, #16
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	031b      	lsls	r3, r3, #12
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f043 0307 	orr.w	r3, r3, #7
 8005b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	609a      	str	r2, [r3, #8]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	021a      	lsls	r2, r3, #8
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	609a      	str	r2, [r3, #8]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e046      	b.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d009      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a10      	ldr	r2, [pc, #64]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10c      	bne.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800

08005c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <__errno>:
 8005c88:	4b01      	ldr	r3, [pc, #4]	; (8005c90 <__errno+0x8>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000044 	.word	0x20000044

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	2600      	movs	r6, #0
 8005c98:	4d0c      	ldr	r5, [pc, #48]	; (8005ccc <__libc_init_array+0x38>)
 8005c9a:	4c0d      	ldr	r4, [pc, #52]	; (8005cd0 <__libc_init_array+0x3c>)
 8005c9c:	1b64      	subs	r4, r4, r5
 8005c9e:	10a4      	asrs	r4, r4, #2
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	f000 fcb0 	bl	8006608 <_init>
 8005ca8:	2600      	movs	r6, #0
 8005caa:	4d0a      	ldr	r5, [pc, #40]	; (8005cd4 <__libc_init_array+0x40>)
 8005cac:	4c0a      	ldr	r4, [pc, #40]	; (8005cd8 <__libc_init_array+0x44>)
 8005cae:	1b64      	subs	r4, r4, r5
 8005cb0:	10a4      	asrs	r4, r4, #2
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08006788 	.word	0x08006788
 8005cd0:	08006788 	.word	0x08006788
 8005cd4:	08006788 	.word	0x08006788
 8005cd8:	0800678c 	.word	0x0800678c

08005cdc <memcpy>:
 8005cdc:	440a      	add	r2, r1
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce4:	d100      	bne.n	8005ce8 <memcpy+0xc>
 8005ce6:	4770      	bx	lr
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cf4:	d1f9      	bne.n	8005cea <memcpy+0xe>
 8005cf6:	bd10      	pop	{r4, pc}

08005cf8 <memset>:
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4402      	add	r2, r0
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <memset+0xa>
 8005d00:	4770      	bx	lr
 8005d02:	f803 1b01 	strb.w	r1, [r3], #1
 8005d06:	e7f9      	b.n	8005cfc <memset+0x4>

08005d08 <siprintf>:
 8005d08:	b40e      	push	{r1, r2, r3}
 8005d0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d0e:	b500      	push	{lr}
 8005d10:	b09c      	sub	sp, #112	; 0x70
 8005d12:	ab1d      	add	r3, sp, #116	; 0x74
 8005d14:	9002      	str	r0, [sp, #8]
 8005d16:	9006      	str	r0, [sp, #24]
 8005d18:	9107      	str	r1, [sp, #28]
 8005d1a:	9104      	str	r1, [sp, #16]
 8005d1c:	4808      	ldr	r0, [pc, #32]	; (8005d40 <siprintf+0x38>)
 8005d1e:	4909      	ldr	r1, [pc, #36]	; (8005d44 <siprintf+0x3c>)
 8005d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d24:	9105      	str	r1, [sp, #20]
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	a902      	add	r1, sp, #8
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	f000 f87c 	bl	8005e28 <_svfiprintf_r>
 8005d30:	2200      	movs	r2, #0
 8005d32:	9b02      	ldr	r3, [sp, #8]
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	b01c      	add	sp, #112	; 0x70
 8005d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d3c:	b003      	add	sp, #12
 8005d3e:	4770      	bx	lr
 8005d40:	20000044 	.word	0x20000044
 8005d44:	ffff0208 	.word	0xffff0208

08005d48 <strncmp>:
 8005d48:	4603      	mov	r3, r0
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	b172      	cbz	r2, 8005d6c <strncmp+0x24>
 8005d4e:	3901      	subs	r1, #1
 8005d50:	1884      	adds	r4, r0, r2
 8005d52:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005d5a:	4290      	cmp	r0, r2
 8005d5c:	d101      	bne.n	8005d62 <strncmp+0x1a>
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	d101      	bne.n	8005d66 <strncmp+0x1e>
 8005d62:	1a80      	subs	r0, r0, r2
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1f3      	bne.n	8005d52 <strncmp+0xa>
 8005d6a:	e7fa      	b.n	8005d62 <strncmp+0x1a>
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	e7f9      	b.n	8005d64 <strncmp+0x1c>

08005d70 <__ssputs_r>:
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	688e      	ldr	r6, [r1, #8]
 8005d76:	4682      	mov	sl, r0
 8005d78:	429e      	cmp	r6, r3
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	4690      	mov	r8, r2
 8005d7e:	461f      	mov	r7, r3
 8005d80:	d838      	bhi.n	8005df4 <__ssputs_r+0x84>
 8005d82:	898a      	ldrh	r2, [r1, #12]
 8005d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d88:	d032      	beq.n	8005df0 <__ssputs_r+0x80>
 8005d8a:	6825      	ldr	r5, [r4, #0]
 8005d8c:	6909      	ldr	r1, [r1, #16]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	eba5 0901 	sub.w	r9, r5, r1
 8005d94:	6965      	ldr	r5, [r4, #20]
 8005d96:	444b      	add	r3, r9
 8005d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da0:	106d      	asrs	r5, r5, #1
 8005da2:	429d      	cmp	r5, r3
 8005da4:	bf38      	it	cc
 8005da6:	461d      	movcc	r5, r3
 8005da8:	0553      	lsls	r3, r2, #21
 8005daa:	d531      	bpl.n	8005e10 <__ssputs_r+0xa0>
 8005dac:	4629      	mov	r1, r5
 8005dae:	f000 fb61 	bl	8006474 <_malloc_r>
 8005db2:	4606      	mov	r6, r0
 8005db4:	b950      	cbnz	r0, 8005dcc <__ssputs_r+0x5c>
 8005db6:	230c      	movs	r3, #12
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	f8ca 3000 	str.w	r3, [sl]
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc6:	81a3      	strh	r3, [r4, #12]
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	464a      	mov	r2, r9
 8005dce:	6921      	ldr	r1, [r4, #16]
 8005dd0:	f7ff ff84 	bl	8005cdc <memcpy>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	6126      	str	r6, [r4, #16]
 8005de2:	444e      	add	r6, r9
 8005de4:	6026      	str	r6, [r4, #0]
 8005de6:	463e      	mov	r6, r7
 8005de8:	6165      	str	r5, [r4, #20]
 8005dea:	eba5 0509 	sub.w	r5, r5, r9
 8005dee:	60a5      	str	r5, [r4, #8]
 8005df0:	42be      	cmp	r6, r7
 8005df2:	d900      	bls.n	8005df6 <__ssputs_r+0x86>
 8005df4:	463e      	mov	r6, r7
 8005df6:	4632      	mov	r2, r6
 8005df8:	4641      	mov	r1, r8
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	f000 fab8 	bl	8006370 <memmove>
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	2000      	movs	r0, #0
 8005e04:	1b9b      	subs	r3, r3, r6
 8005e06:	60a3      	str	r3, [r4, #8]
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	4433      	add	r3, r6
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	e7db      	b.n	8005dc8 <__ssputs_r+0x58>
 8005e10:	462a      	mov	r2, r5
 8005e12:	f000 fba3 	bl	800655c <_realloc_r>
 8005e16:	4606      	mov	r6, r0
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1e1      	bne.n	8005de0 <__ssputs_r+0x70>
 8005e1c:	4650      	mov	r0, sl
 8005e1e:	6921      	ldr	r1, [r4, #16]
 8005e20:	f000 fac0 	bl	80063a4 <_free_r>
 8005e24:	e7c7      	b.n	8005db6 <__ssputs_r+0x46>
	...

08005e28 <_svfiprintf_r>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	4698      	mov	r8, r3
 8005e2e:	898b      	ldrh	r3, [r1, #12]
 8005e30:	4607      	mov	r7, r0
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	460d      	mov	r5, r1
 8005e36:	4614      	mov	r4, r2
 8005e38:	b09d      	sub	sp, #116	; 0x74
 8005e3a:	d50e      	bpl.n	8005e5a <_svfiprintf_r+0x32>
 8005e3c:	690b      	ldr	r3, [r1, #16]
 8005e3e:	b963      	cbnz	r3, 8005e5a <_svfiprintf_r+0x32>
 8005e40:	2140      	movs	r1, #64	; 0x40
 8005e42:	f000 fb17 	bl	8006474 <_malloc_r>
 8005e46:	6028      	str	r0, [r5, #0]
 8005e48:	6128      	str	r0, [r5, #16]
 8005e4a:	b920      	cbnz	r0, 8005e56 <_svfiprintf_r+0x2e>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	e0d1      	b.n	8005ffa <_svfiprintf_r+0x1d2>
 8005e56:	2340      	movs	r3, #64	; 0x40
 8005e58:	616b      	str	r3, [r5, #20]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5e:	2320      	movs	r3, #32
 8005e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e64:	2330      	movs	r3, #48	; 0x30
 8005e66:	f04f 0901 	mov.w	r9, #1
 8005e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006014 <_svfiprintf_r+0x1ec>
 8005e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e76:	4623      	mov	r3, r4
 8005e78:	469a      	mov	sl, r3
 8005e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e7e:	b10a      	cbz	r2, 8005e84 <_svfiprintf_r+0x5c>
 8005e80:	2a25      	cmp	r2, #37	; 0x25
 8005e82:	d1f9      	bne.n	8005e78 <_svfiprintf_r+0x50>
 8005e84:	ebba 0b04 	subs.w	fp, sl, r4
 8005e88:	d00b      	beq.n	8005ea2 <_svfiprintf_r+0x7a>
 8005e8a:	465b      	mov	r3, fp
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	4629      	mov	r1, r5
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff ff6d 	bl	8005d70 <__ssputs_r>
 8005e96:	3001      	adds	r0, #1
 8005e98:	f000 80aa 	beq.w	8005ff0 <_svfiprintf_r+0x1c8>
 8005e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e9e:	445a      	add	r2, fp
 8005ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80a2 	beq.w	8005ff0 <_svfiprintf_r+0x1c8>
 8005eac:	2300      	movs	r3, #0
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eb6:	f10a 0a01 	add.w	sl, sl, #1
 8005eba:	9304      	str	r3, [sp, #16]
 8005ebc:	9307      	str	r3, [sp, #28]
 8005ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ec4:	4654      	mov	r4, sl
 8005ec6:	2205      	movs	r2, #5
 8005ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ecc:	4851      	ldr	r0, [pc, #324]	; (8006014 <_svfiprintf_r+0x1ec>)
 8005ece:	f000 fa41 	bl	8006354 <memchr>
 8005ed2:	9a04      	ldr	r2, [sp, #16]
 8005ed4:	b9d8      	cbnz	r0, 8005f0e <_svfiprintf_r+0xe6>
 8005ed6:	06d0      	lsls	r0, r2, #27
 8005ed8:	bf44      	itt	mi
 8005eda:	2320      	movmi	r3, #32
 8005edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee0:	0711      	lsls	r1, r2, #28
 8005ee2:	bf44      	itt	mi
 8005ee4:	232b      	movmi	r3, #43	; 0x2b
 8005ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eea:	f89a 3000 	ldrb.w	r3, [sl]
 8005eee:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef0:	d015      	beq.n	8005f1e <_svfiprintf_r+0xf6>
 8005ef2:	4654      	mov	r4, sl
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	f04f 0c0a 	mov.w	ip, #10
 8005efa:	9a07      	ldr	r2, [sp, #28]
 8005efc:	4621      	mov	r1, r4
 8005efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f02:	3b30      	subs	r3, #48	; 0x30
 8005f04:	2b09      	cmp	r3, #9
 8005f06:	d94e      	bls.n	8005fa6 <_svfiprintf_r+0x17e>
 8005f08:	b1b0      	cbz	r0, 8005f38 <_svfiprintf_r+0x110>
 8005f0a:	9207      	str	r2, [sp, #28]
 8005f0c:	e014      	b.n	8005f38 <_svfiprintf_r+0x110>
 8005f0e:	eba0 0308 	sub.w	r3, r0, r8
 8005f12:	fa09 f303 	lsl.w	r3, r9, r3
 8005f16:	4313      	orrs	r3, r2
 8005f18:	46a2      	mov	sl, r4
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	e7d2      	b.n	8005ec4 <_svfiprintf_r+0x9c>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	1d19      	adds	r1, r3, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	9103      	str	r1, [sp, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bfbb      	ittet	lt
 8005f2a:	425b      	neglt	r3, r3
 8005f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f30:	9307      	strge	r3, [sp, #28]
 8005f32:	9307      	strlt	r3, [sp, #28]
 8005f34:	bfb8      	it	lt
 8005f36:	9204      	strlt	r2, [sp, #16]
 8005f38:	7823      	ldrb	r3, [r4, #0]
 8005f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f3c:	d10c      	bne.n	8005f58 <_svfiprintf_r+0x130>
 8005f3e:	7863      	ldrb	r3, [r4, #1]
 8005f40:	2b2a      	cmp	r3, #42	; 0x2a
 8005f42:	d135      	bne.n	8005fb0 <_svfiprintf_r+0x188>
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	3402      	adds	r4, #2
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	9203      	str	r2, [sp, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bfb8      	it	lt
 8005f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f56:	9305      	str	r3, [sp, #20]
 8005f58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006018 <_svfiprintf_r+0x1f0>
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	4650      	mov	r0, sl
 8005f60:	7821      	ldrb	r1, [r4, #0]
 8005f62:	f000 f9f7 	bl	8006354 <memchr>
 8005f66:	b140      	cbz	r0, 8005f7a <_svfiprintf_r+0x152>
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	eba0 000a 	sub.w	r0, r0, sl
 8005f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f72:	9b04      	ldr	r3, [sp, #16]
 8005f74:	3401      	adds	r4, #1
 8005f76:	4303      	orrs	r3, r0
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7e:	2206      	movs	r2, #6
 8005f80:	4826      	ldr	r0, [pc, #152]	; (800601c <_svfiprintf_r+0x1f4>)
 8005f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f86:	f000 f9e5 	bl	8006354 <memchr>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d038      	beq.n	8006000 <_svfiprintf_r+0x1d8>
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <_svfiprintf_r+0x1f8>)
 8005f90:	bb1b      	cbnz	r3, 8005fda <_svfiprintf_r+0x1b2>
 8005f92:	9b03      	ldr	r3, [sp, #12]
 8005f94:	3307      	adds	r3, #7
 8005f96:	f023 0307 	bic.w	r3, r3, #7
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	9303      	str	r3, [sp, #12]
 8005f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa0:	4433      	add	r3, r6
 8005fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa4:	e767      	b.n	8005e76 <_svfiprintf_r+0x4e>
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	2001      	movs	r0, #1
 8005faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fae:	e7a5      	b.n	8005efc <_svfiprintf_r+0xd4>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f04f 0c0a 	mov.w	ip, #10
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	3401      	adds	r4, #1
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc2:	3a30      	subs	r2, #48	; 0x30
 8005fc4:	2a09      	cmp	r2, #9
 8005fc6:	d903      	bls.n	8005fd0 <_svfiprintf_r+0x1a8>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0c5      	beq.n	8005f58 <_svfiprintf_r+0x130>
 8005fcc:	9105      	str	r1, [sp, #20]
 8005fce:	e7c3      	b.n	8005f58 <_svfiprintf_r+0x130>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd8:	e7f0      	b.n	8005fbc <_svfiprintf_r+0x194>
 8005fda:	ab03      	add	r3, sp, #12
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	462a      	mov	r2, r5
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <_svfiprintf_r+0x1fc>)
 8005fe4:	a904      	add	r1, sp, #16
 8005fe6:	f3af 8000 	nop.w
 8005fea:	1c42      	adds	r2, r0, #1
 8005fec:	4606      	mov	r6, r0
 8005fee:	d1d6      	bne.n	8005f9e <_svfiprintf_r+0x176>
 8005ff0:	89ab      	ldrh	r3, [r5, #12]
 8005ff2:	065b      	lsls	r3, r3, #25
 8005ff4:	f53f af2c 	bmi.w	8005e50 <_svfiprintf_r+0x28>
 8005ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ffa:	b01d      	add	sp, #116	; 0x74
 8005ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006000:	ab03      	add	r3, sp, #12
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	462a      	mov	r2, r5
 8006006:	4638      	mov	r0, r7
 8006008:	4b06      	ldr	r3, [pc, #24]	; (8006024 <_svfiprintf_r+0x1fc>)
 800600a:	a904      	add	r1, sp, #16
 800600c:	f000 f87c 	bl	8006108 <_printf_i>
 8006010:	e7eb      	b.n	8005fea <_svfiprintf_r+0x1c2>
 8006012:	bf00      	nop
 8006014:	08006752 	.word	0x08006752
 8006018:	08006758 	.word	0x08006758
 800601c:	0800675c 	.word	0x0800675c
 8006020:	00000000 	.word	0x00000000
 8006024:	08005d71 	.word	0x08005d71

08006028 <_printf_common>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	4616      	mov	r6, r2
 800602e:	4699      	mov	r9, r3
 8006030:	688a      	ldr	r2, [r1, #8]
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	4607      	mov	r7, r0
 8006036:	4293      	cmp	r3, r2
 8006038:	bfb8      	it	lt
 800603a:	4613      	movlt	r3, r2
 800603c:	6033      	str	r3, [r6, #0]
 800603e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006042:	460c      	mov	r4, r1
 8006044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006048:	b10a      	cbz	r2, 800604e <_printf_common+0x26>
 800604a:	3301      	adds	r3, #1
 800604c:	6033      	str	r3, [r6, #0]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	0699      	lsls	r1, r3, #26
 8006052:	bf42      	ittt	mi
 8006054:	6833      	ldrmi	r3, [r6, #0]
 8006056:	3302      	addmi	r3, #2
 8006058:	6033      	strmi	r3, [r6, #0]
 800605a:	6825      	ldr	r5, [r4, #0]
 800605c:	f015 0506 	ands.w	r5, r5, #6
 8006060:	d106      	bne.n	8006070 <_printf_common+0x48>
 8006062:	f104 0a19 	add.w	sl, r4, #25
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	6832      	ldr	r2, [r6, #0]
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	42ab      	cmp	r3, r5
 800606e:	dc28      	bgt.n	80060c2 <_printf_common+0x9a>
 8006070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006074:	1e13      	subs	r3, r2, #0
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	bf18      	it	ne
 800607a:	2301      	movne	r3, #1
 800607c:	0692      	lsls	r2, r2, #26
 800607e:	d42d      	bmi.n	80060dc <_printf_common+0xb4>
 8006080:	4649      	mov	r1, r9
 8006082:	4638      	mov	r0, r7
 8006084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006088:	47c0      	blx	r8
 800608a:	3001      	adds	r0, #1
 800608c:	d020      	beq.n	80060d0 <_printf_common+0xa8>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	68e5      	ldr	r5, [r4, #12]
 8006092:	f003 0306 	and.w	r3, r3, #6
 8006096:	2b04      	cmp	r3, #4
 8006098:	bf18      	it	ne
 800609a:	2500      	movne	r5, #0
 800609c:	6832      	ldr	r2, [r6, #0]
 800609e:	f04f 0600 	mov.w	r6, #0
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	bf08      	it	eq
 80060a6:	1aad      	subeq	r5, r5, r2
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	bf08      	it	eq
 80060ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b0:	4293      	cmp	r3, r2
 80060b2:	bfc4      	itt	gt
 80060b4:	1a9b      	subgt	r3, r3, r2
 80060b6:	18ed      	addgt	r5, r5, r3
 80060b8:	341a      	adds	r4, #26
 80060ba:	42b5      	cmp	r5, r6
 80060bc:	d11a      	bne.n	80060f4 <_printf_common+0xcc>
 80060be:	2000      	movs	r0, #0
 80060c0:	e008      	b.n	80060d4 <_printf_common+0xac>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4652      	mov	r2, sl
 80060c6:	4649      	mov	r1, r9
 80060c8:	4638      	mov	r0, r7
 80060ca:	47c0      	blx	r8
 80060cc:	3001      	adds	r0, #1
 80060ce:	d103      	bne.n	80060d8 <_printf_common+0xb0>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	3501      	adds	r5, #1
 80060da:	e7c4      	b.n	8006066 <_printf_common+0x3e>
 80060dc:	2030      	movs	r0, #48	; 0x30
 80060de:	18e1      	adds	r1, r4, r3
 80060e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ea:	4422      	add	r2, r4
 80060ec:	3302      	adds	r3, #2
 80060ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f2:	e7c5      	b.n	8006080 <_printf_common+0x58>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4622      	mov	r2, r4
 80060f8:	4649      	mov	r1, r9
 80060fa:	4638      	mov	r0, r7
 80060fc:	47c0      	blx	r8
 80060fe:	3001      	adds	r0, #1
 8006100:	d0e6      	beq.n	80060d0 <_printf_common+0xa8>
 8006102:	3601      	adds	r6, #1
 8006104:	e7d9      	b.n	80060ba <_printf_common+0x92>
	...

08006108 <_printf_i>:
 8006108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	7e0f      	ldrb	r7, [r1, #24]
 800610e:	4691      	mov	r9, r2
 8006110:	2f78      	cmp	r7, #120	; 0x78
 8006112:	4680      	mov	r8, r0
 8006114:	460c      	mov	r4, r1
 8006116:	469a      	mov	sl, r3
 8006118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800611a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800611e:	d807      	bhi.n	8006130 <_printf_i+0x28>
 8006120:	2f62      	cmp	r7, #98	; 0x62
 8006122:	d80a      	bhi.n	800613a <_printf_i+0x32>
 8006124:	2f00      	cmp	r7, #0
 8006126:	f000 80d9 	beq.w	80062dc <_printf_i+0x1d4>
 800612a:	2f58      	cmp	r7, #88	; 0x58
 800612c:	f000 80a4 	beq.w	8006278 <_printf_i+0x170>
 8006130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006138:	e03a      	b.n	80061b0 <_printf_i+0xa8>
 800613a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613e:	2b15      	cmp	r3, #21
 8006140:	d8f6      	bhi.n	8006130 <_printf_i+0x28>
 8006142:	a101      	add	r1, pc, #4	; (adr r1, 8006148 <_printf_i+0x40>)
 8006144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006131 	.word	0x08006131
 8006154:	08006131 	.word	0x08006131
 8006158:	08006131 	.word	0x08006131
 800615c:	08006131 	.word	0x08006131
 8006160:	080061b5 	.word	0x080061b5
 8006164:	08006131 	.word	0x08006131
 8006168:	08006131 	.word	0x08006131
 800616c:	08006131 	.word	0x08006131
 8006170:	08006131 	.word	0x08006131
 8006174:	080062c3 	.word	0x080062c3
 8006178:	080061e5 	.word	0x080061e5
 800617c:	080062a5 	.word	0x080062a5
 8006180:	08006131 	.word	0x08006131
 8006184:	08006131 	.word	0x08006131
 8006188:	080062e5 	.word	0x080062e5
 800618c:	08006131 	.word	0x08006131
 8006190:	080061e5 	.word	0x080061e5
 8006194:	08006131 	.word	0x08006131
 8006198:	08006131 	.word	0x08006131
 800619c:	080062ad 	.word	0x080062ad
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	602a      	str	r2, [r5, #0]
 80061a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0a4      	b.n	80062fe <_printf_i+0x1f6>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	6829      	ldr	r1, [r5, #0]
 80061b8:	0606      	lsls	r6, r0, #24
 80061ba:	f101 0304 	add.w	r3, r1, #4
 80061be:	d50a      	bpl.n	80061d6 <_printf_i+0xce>
 80061c0:	680e      	ldr	r6, [r1, #0]
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	da03      	bge.n	80061d0 <_printf_i+0xc8>
 80061c8:	232d      	movs	r3, #45	; 0x2d
 80061ca:	4276      	negs	r6, r6
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	230a      	movs	r3, #10
 80061d2:	485e      	ldr	r0, [pc, #376]	; (800634c <_printf_i+0x244>)
 80061d4:	e019      	b.n	800620a <_printf_i+0x102>
 80061d6:	680e      	ldr	r6, [r1, #0]
 80061d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	bf18      	it	ne
 80061e0:	b236      	sxthne	r6, r6
 80061e2:	e7ef      	b.n	80061c4 <_printf_i+0xbc>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	6820      	ldr	r0, [r4, #0]
 80061e8:	1d19      	adds	r1, r3, #4
 80061ea:	6029      	str	r1, [r5, #0]
 80061ec:	0601      	lsls	r1, r0, #24
 80061ee:	d501      	bpl.n	80061f4 <_printf_i+0xec>
 80061f0:	681e      	ldr	r6, [r3, #0]
 80061f2:	e002      	b.n	80061fa <_printf_i+0xf2>
 80061f4:	0646      	lsls	r6, r0, #25
 80061f6:	d5fb      	bpl.n	80061f0 <_printf_i+0xe8>
 80061f8:	881e      	ldrh	r6, [r3, #0]
 80061fa:	2f6f      	cmp	r7, #111	; 0x6f
 80061fc:	bf0c      	ite	eq
 80061fe:	2308      	moveq	r3, #8
 8006200:	230a      	movne	r3, #10
 8006202:	4852      	ldr	r0, [pc, #328]	; (800634c <_printf_i+0x244>)
 8006204:	2100      	movs	r1, #0
 8006206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620a:	6865      	ldr	r5, [r4, #4]
 800620c:	2d00      	cmp	r5, #0
 800620e:	bfa8      	it	ge
 8006210:	6821      	ldrge	r1, [r4, #0]
 8006212:	60a5      	str	r5, [r4, #8]
 8006214:	bfa4      	itt	ge
 8006216:	f021 0104 	bicge.w	r1, r1, #4
 800621a:	6021      	strge	r1, [r4, #0]
 800621c:	b90e      	cbnz	r6, 8006222 <_printf_i+0x11a>
 800621e:	2d00      	cmp	r5, #0
 8006220:	d04d      	beq.n	80062be <_printf_i+0x1b6>
 8006222:	4615      	mov	r5, r2
 8006224:	fbb6 f1f3 	udiv	r1, r6, r3
 8006228:	fb03 6711 	mls	r7, r3, r1, r6
 800622c:	5dc7      	ldrb	r7, [r0, r7]
 800622e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006232:	4637      	mov	r7, r6
 8006234:	42bb      	cmp	r3, r7
 8006236:	460e      	mov	r6, r1
 8006238:	d9f4      	bls.n	8006224 <_printf_i+0x11c>
 800623a:	2b08      	cmp	r3, #8
 800623c:	d10b      	bne.n	8006256 <_printf_i+0x14e>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	07de      	lsls	r6, r3, #31
 8006242:	d508      	bpl.n	8006256 <_printf_i+0x14e>
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	6861      	ldr	r1, [r4, #4]
 8006248:	4299      	cmp	r1, r3
 800624a:	bfde      	ittt	le
 800624c:	2330      	movle	r3, #48	; 0x30
 800624e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006252:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006256:	1b52      	subs	r2, r2, r5
 8006258:	6122      	str	r2, [r4, #16]
 800625a:	464b      	mov	r3, r9
 800625c:	4621      	mov	r1, r4
 800625e:	4640      	mov	r0, r8
 8006260:	f8cd a000 	str.w	sl, [sp]
 8006264:	aa03      	add	r2, sp, #12
 8006266:	f7ff fedf 	bl	8006028 <_printf_common>
 800626a:	3001      	adds	r0, #1
 800626c:	d14c      	bne.n	8006308 <_printf_i+0x200>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	b004      	add	sp, #16
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	4834      	ldr	r0, [pc, #208]	; (800634c <_printf_i+0x244>)
 800627a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800627e:	6829      	ldr	r1, [r5, #0]
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	f851 6b04 	ldr.w	r6, [r1], #4
 8006286:	6029      	str	r1, [r5, #0]
 8006288:	061d      	lsls	r5, r3, #24
 800628a:	d514      	bpl.n	80062b6 <_printf_i+0x1ae>
 800628c:	07df      	lsls	r7, r3, #31
 800628e:	bf44      	itt	mi
 8006290:	f043 0320 	orrmi.w	r3, r3, #32
 8006294:	6023      	strmi	r3, [r4, #0]
 8006296:	b91e      	cbnz	r6, 80062a0 <_printf_i+0x198>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	f023 0320 	bic.w	r3, r3, #32
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	2310      	movs	r3, #16
 80062a2:	e7af      	b.n	8006204 <_printf_i+0xfc>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	f043 0320 	orr.w	r3, r3, #32
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	2378      	movs	r3, #120	; 0x78
 80062ae:	4828      	ldr	r0, [pc, #160]	; (8006350 <_printf_i+0x248>)
 80062b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062b4:	e7e3      	b.n	800627e <_printf_i+0x176>
 80062b6:	0659      	lsls	r1, r3, #25
 80062b8:	bf48      	it	mi
 80062ba:	b2b6      	uxthmi	r6, r6
 80062bc:	e7e6      	b.n	800628c <_printf_i+0x184>
 80062be:	4615      	mov	r5, r2
 80062c0:	e7bb      	b.n	800623a <_printf_i+0x132>
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	6826      	ldr	r6, [r4, #0]
 80062c6:	1d18      	adds	r0, r3, #4
 80062c8:	6961      	ldr	r1, [r4, #20]
 80062ca:	6028      	str	r0, [r5, #0]
 80062cc:	0635      	lsls	r5, r6, #24
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	d501      	bpl.n	80062d6 <_printf_i+0x1ce>
 80062d2:	6019      	str	r1, [r3, #0]
 80062d4:	e002      	b.n	80062dc <_printf_i+0x1d4>
 80062d6:	0670      	lsls	r0, r6, #25
 80062d8:	d5fb      	bpl.n	80062d2 <_printf_i+0x1ca>
 80062da:	8019      	strh	r1, [r3, #0]
 80062dc:	2300      	movs	r3, #0
 80062de:	4615      	mov	r5, r2
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	e7ba      	b.n	800625a <_printf_i+0x152>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	2100      	movs	r1, #0
 80062e8:	1d1a      	adds	r2, r3, #4
 80062ea:	602a      	str	r2, [r5, #0]
 80062ec:	681d      	ldr	r5, [r3, #0]
 80062ee:	6862      	ldr	r2, [r4, #4]
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f82f 	bl	8006354 <memchr>
 80062f6:	b108      	cbz	r0, 80062fc <_printf_i+0x1f4>
 80062f8:	1b40      	subs	r0, r0, r5
 80062fa:	6060      	str	r0, [r4, #4]
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	6123      	str	r3, [r4, #16]
 8006300:	2300      	movs	r3, #0
 8006302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006306:	e7a8      	b.n	800625a <_printf_i+0x152>
 8006308:	462a      	mov	r2, r5
 800630a:	4649      	mov	r1, r9
 800630c:	4640      	mov	r0, r8
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	47d0      	blx	sl
 8006312:	3001      	adds	r0, #1
 8006314:	d0ab      	beq.n	800626e <_printf_i+0x166>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	079b      	lsls	r3, r3, #30
 800631a:	d413      	bmi.n	8006344 <_printf_i+0x23c>
 800631c:	68e0      	ldr	r0, [r4, #12]
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	4298      	cmp	r0, r3
 8006322:	bfb8      	it	lt
 8006324:	4618      	movlt	r0, r3
 8006326:	e7a4      	b.n	8006272 <_printf_i+0x16a>
 8006328:	2301      	movs	r3, #1
 800632a:	4632      	mov	r2, r6
 800632c:	4649      	mov	r1, r9
 800632e:	4640      	mov	r0, r8
 8006330:	47d0      	blx	sl
 8006332:	3001      	adds	r0, #1
 8006334:	d09b      	beq.n	800626e <_printf_i+0x166>
 8006336:	3501      	adds	r5, #1
 8006338:	68e3      	ldr	r3, [r4, #12]
 800633a:	9903      	ldr	r1, [sp, #12]
 800633c:	1a5b      	subs	r3, r3, r1
 800633e:	42ab      	cmp	r3, r5
 8006340:	dcf2      	bgt.n	8006328 <_printf_i+0x220>
 8006342:	e7eb      	b.n	800631c <_printf_i+0x214>
 8006344:	2500      	movs	r5, #0
 8006346:	f104 0619 	add.w	r6, r4, #25
 800634a:	e7f5      	b.n	8006338 <_printf_i+0x230>
 800634c:	08006763 	.word	0x08006763
 8006350:	08006774 	.word	0x08006774

08006354 <memchr>:
 8006354:	4603      	mov	r3, r0
 8006356:	b510      	push	{r4, lr}
 8006358:	b2c9      	uxtb	r1, r1
 800635a:	4402      	add	r2, r0
 800635c:	4293      	cmp	r3, r2
 800635e:	4618      	mov	r0, r3
 8006360:	d101      	bne.n	8006366 <memchr+0x12>
 8006362:	2000      	movs	r0, #0
 8006364:	e003      	b.n	800636e <memchr+0x1a>
 8006366:	7804      	ldrb	r4, [r0, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	428c      	cmp	r4, r1
 800636c:	d1f6      	bne.n	800635c <memchr+0x8>
 800636e:	bd10      	pop	{r4, pc}

08006370 <memmove>:
 8006370:	4288      	cmp	r0, r1
 8006372:	b510      	push	{r4, lr}
 8006374:	eb01 0402 	add.w	r4, r1, r2
 8006378:	d902      	bls.n	8006380 <memmove+0x10>
 800637a:	4284      	cmp	r4, r0
 800637c:	4623      	mov	r3, r4
 800637e:	d807      	bhi.n	8006390 <memmove+0x20>
 8006380:	1e43      	subs	r3, r0, #1
 8006382:	42a1      	cmp	r1, r4
 8006384:	d008      	beq.n	8006398 <memmove+0x28>
 8006386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800638a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800638e:	e7f8      	b.n	8006382 <memmove+0x12>
 8006390:	4601      	mov	r1, r0
 8006392:	4402      	add	r2, r0
 8006394:	428a      	cmp	r2, r1
 8006396:	d100      	bne.n	800639a <memmove+0x2a>
 8006398:	bd10      	pop	{r4, pc}
 800639a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800639e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063a2:	e7f7      	b.n	8006394 <memmove+0x24>

080063a4 <_free_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4605      	mov	r5, r0
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d040      	beq.n	800642e <_free_r+0x8a>
 80063ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b0:	1f0c      	subs	r4, r1, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bfb8      	it	lt
 80063b6:	18e4      	addlt	r4, r4, r3
 80063b8:	f000 f910 	bl	80065dc <__malloc_lock>
 80063bc:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <_free_r+0x8c>)
 80063be:	6813      	ldr	r3, [r2, #0]
 80063c0:	b933      	cbnz	r3, 80063d0 <_free_r+0x2c>
 80063c2:	6063      	str	r3, [r4, #4]
 80063c4:	6014      	str	r4, [r2, #0]
 80063c6:	4628      	mov	r0, r5
 80063c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063cc:	f000 b90c 	b.w	80065e8 <__malloc_unlock>
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	d908      	bls.n	80063e6 <_free_r+0x42>
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	1821      	adds	r1, r4, r0
 80063d8:	428b      	cmp	r3, r1
 80063da:	bf01      	itttt	eq
 80063dc:	6819      	ldreq	r1, [r3, #0]
 80063de:	685b      	ldreq	r3, [r3, #4]
 80063e0:	1809      	addeq	r1, r1, r0
 80063e2:	6021      	streq	r1, [r4, #0]
 80063e4:	e7ed      	b.n	80063c2 <_free_r+0x1e>
 80063e6:	461a      	mov	r2, r3
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	b10b      	cbz	r3, 80063f0 <_free_r+0x4c>
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d9fa      	bls.n	80063e6 <_free_r+0x42>
 80063f0:	6811      	ldr	r1, [r2, #0]
 80063f2:	1850      	adds	r0, r2, r1
 80063f4:	42a0      	cmp	r0, r4
 80063f6:	d10b      	bne.n	8006410 <_free_r+0x6c>
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	4401      	add	r1, r0
 80063fc:	1850      	adds	r0, r2, r1
 80063fe:	4283      	cmp	r3, r0
 8006400:	6011      	str	r1, [r2, #0]
 8006402:	d1e0      	bne.n	80063c6 <_free_r+0x22>
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4401      	add	r1, r0
 800640a:	6011      	str	r1, [r2, #0]
 800640c:	6053      	str	r3, [r2, #4]
 800640e:	e7da      	b.n	80063c6 <_free_r+0x22>
 8006410:	d902      	bls.n	8006418 <_free_r+0x74>
 8006412:	230c      	movs	r3, #12
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	e7d6      	b.n	80063c6 <_free_r+0x22>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	1821      	adds	r1, r4, r0
 800641c:	428b      	cmp	r3, r1
 800641e:	bf01      	itttt	eq
 8006420:	6819      	ldreq	r1, [r3, #0]
 8006422:	685b      	ldreq	r3, [r3, #4]
 8006424:	1809      	addeq	r1, r1, r0
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	6054      	str	r4, [r2, #4]
 800642c:	e7cb      	b.n	80063c6 <_free_r+0x22>
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20000a4c 	.word	0x20000a4c

08006434 <sbrk_aligned>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	4e0e      	ldr	r6, [pc, #56]	; (8006470 <sbrk_aligned+0x3c>)
 8006438:	460c      	mov	r4, r1
 800643a:	6831      	ldr	r1, [r6, #0]
 800643c:	4605      	mov	r5, r0
 800643e:	b911      	cbnz	r1, 8006446 <sbrk_aligned+0x12>
 8006440:	f000 f8bc 	bl	80065bc <_sbrk_r>
 8006444:	6030      	str	r0, [r6, #0]
 8006446:	4621      	mov	r1, r4
 8006448:	4628      	mov	r0, r5
 800644a:	f000 f8b7 	bl	80065bc <_sbrk_r>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d00a      	beq.n	8006468 <sbrk_aligned+0x34>
 8006452:	1cc4      	adds	r4, r0, #3
 8006454:	f024 0403 	bic.w	r4, r4, #3
 8006458:	42a0      	cmp	r0, r4
 800645a:	d007      	beq.n	800646c <sbrk_aligned+0x38>
 800645c:	1a21      	subs	r1, r4, r0
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f8ac 	bl	80065bc <_sbrk_r>
 8006464:	3001      	adds	r0, #1
 8006466:	d101      	bne.n	800646c <sbrk_aligned+0x38>
 8006468:	f04f 34ff 	mov.w	r4, #4294967295
 800646c:	4620      	mov	r0, r4
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	20000a50 	.word	0x20000a50

08006474 <_malloc_r>:
 8006474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	1ccd      	adds	r5, r1, #3
 800647a:	f025 0503 	bic.w	r5, r5, #3
 800647e:	3508      	adds	r5, #8
 8006480:	2d0c      	cmp	r5, #12
 8006482:	bf38      	it	cc
 8006484:	250c      	movcc	r5, #12
 8006486:	2d00      	cmp	r5, #0
 8006488:	4607      	mov	r7, r0
 800648a:	db01      	blt.n	8006490 <_malloc_r+0x1c>
 800648c:	42a9      	cmp	r1, r5
 800648e:	d905      	bls.n	800649c <_malloc_r+0x28>
 8006490:	230c      	movs	r3, #12
 8006492:	2600      	movs	r6, #0
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	4630      	mov	r0, r6
 8006498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800649c:	4e2e      	ldr	r6, [pc, #184]	; (8006558 <_malloc_r+0xe4>)
 800649e:	f000 f89d 	bl	80065dc <__malloc_lock>
 80064a2:	6833      	ldr	r3, [r6, #0]
 80064a4:	461c      	mov	r4, r3
 80064a6:	bb34      	cbnz	r4, 80064f6 <_malloc_r+0x82>
 80064a8:	4629      	mov	r1, r5
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7ff ffc2 	bl	8006434 <sbrk_aligned>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	4604      	mov	r4, r0
 80064b4:	d14d      	bne.n	8006552 <_malloc_r+0xde>
 80064b6:	6834      	ldr	r4, [r6, #0]
 80064b8:	4626      	mov	r6, r4
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	d140      	bne.n	8006540 <_malloc_r+0xcc>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	4631      	mov	r1, r6
 80064c2:	4638      	mov	r0, r7
 80064c4:	eb04 0803 	add.w	r8, r4, r3
 80064c8:	f000 f878 	bl	80065bc <_sbrk_r>
 80064cc:	4580      	cmp	r8, r0
 80064ce:	d13a      	bne.n	8006546 <_malloc_r+0xd2>
 80064d0:	6821      	ldr	r1, [r4, #0]
 80064d2:	3503      	adds	r5, #3
 80064d4:	1a6d      	subs	r5, r5, r1
 80064d6:	f025 0503 	bic.w	r5, r5, #3
 80064da:	3508      	adds	r5, #8
 80064dc:	2d0c      	cmp	r5, #12
 80064de:	bf38      	it	cc
 80064e0:	250c      	movcc	r5, #12
 80064e2:	4638      	mov	r0, r7
 80064e4:	4629      	mov	r1, r5
 80064e6:	f7ff ffa5 	bl	8006434 <sbrk_aligned>
 80064ea:	3001      	adds	r0, #1
 80064ec:	d02b      	beq.n	8006546 <_malloc_r+0xd2>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	442b      	add	r3, r5
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	e00e      	b.n	8006514 <_malloc_r+0xa0>
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	1b52      	subs	r2, r2, r5
 80064fa:	d41e      	bmi.n	800653a <_malloc_r+0xc6>
 80064fc:	2a0b      	cmp	r2, #11
 80064fe:	d916      	bls.n	800652e <_malloc_r+0xba>
 8006500:	1961      	adds	r1, r4, r5
 8006502:	42a3      	cmp	r3, r4
 8006504:	6025      	str	r5, [r4, #0]
 8006506:	bf18      	it	ne
 8006508:	6059      	strne	r1, [r3, #4]
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	bf08      	it	eq
 800650e:	6031      	streq	r1, [r6, #0]
 8006510:	5162      	str	r2, [r4, r5]
 8006512:	604b      	str	r3, [r1, #4]
 8006514:	4638      	mov	r0, r7
 8006516:	f104 060b 	add.w	r6, r4, #11
 800651a:	f000 f865 	bl	80065e8 <__malloc_unlock>
 800651e:	f026 0607 	bic.w	r6, r6, #7
 8006522:	1d23      	adds	r3, r4, #4
 8006524:	1af2      	subs	r2, r6, r3
 8006526:	d0b6      	beq.n	8006496 <_malloc_r+0x22>
 8006528:	1b9b      	subs	r3, r3, r6
 800652a:	50a3      	str	r3, [r4, r2]
 800652c:	e7b3      	b.n	8006496 <_malloc_r+0x22>
 800652e:	6862      	ldr	r2, [r4, #4]
 8006530:	42a3      	cmp	r3, r4
 8006532:	bf0c      	ite	eq
 8006534:	6032      	streq	r2, [r6, #0]
 8006536:	605a      	strne	r2, [r3, #4]
 8006538:	e7ec      	b.n	8006514 <_malloc_r+0xa0>
 800653a:	4623      	mov	r3, r4
 800653c:	6864      	ldr	r4, [r4, #4]
 800653e:	e7b2      	b.n	80064a6 <_malloc_r+0x32>
 8006540:	4634      	mov	r4, r6
 8006542:	6876      	ldr	r6, [r6, #4]
 8006544:	e7b9      	b.n	80064ba <_malloc_r+0x46>
 8006546:	230c      	movs	r3, #12
 8006548:	4638      	mov	r0, r7
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	f000 f84c 	bl	80065e8 <__malloc_unlock>
 8006550:	e7a1      	b.n	8006496 <_malloc_r+0x22>
 8006552:	6025      	str	r5, [r4, #0]
 8006554:	e7de      	b.n	8006514 <_malloc_r+0xa0>
 8006556:	bf00      	nop
 8006558:	20000a4c 	.word	0x20000a4c

0800655c <_realloc_r>:
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	4680      	mov	r8, r0
 8006562:	4614      	mov	r4, r2
 8006564:	460e      	mov	r6, r1
 8006566:	b921      	cbnz	r1, 8006572 <_realloc_r+0x16>
 8006568:	4611      	mov	r1, r2
 800656a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800656e:	f7ff bf81 	b.w	8006474 <_malloc_r>
 8006572:	b92a      	cbnz	r2, 8006580 <_realloc_r+0x24>
 8006574:	f7ff ff16 	bl	80063a4 <_free_r>
 8006578:	4625      	mov	r5, r4
 800657a:	4628      	mov	r0, r5
 800657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006580:	f000 f838 	bl	80065f4 <_malloc_usable_size_r>
 8006584:	4284      	cmp	r4, r0
 8006586:	4607      	mov	r7, r0
 8006588:	d802      	bhi.n	8006590 <_realloc_r+0x34>
 800658a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800658e:	d812      	bhi.n	80065b6 <_realloc_r+0x5a>
 8006590:	4621      	mov	r1, r4
 8006592:	4640      	mov	r0, r8
 8006594:	f7ff ff6e 	bl	8006474 <_malloc_r>
 8006598:	4605      	mov	r5, r0
 800659a:	2800      	cmp	r0, #0
 800659c:	d0ed      	beq.n	800657a <_realloc_r+0x1e>
 800659e:	42bc      	cmp	r4, r7
 80065a0:	4622      	mov	r2, r4
 80065a2:	4631      	mov	r1, r6
 80065a4:	bf28      	it	cs
 80065a6:	463a      	movcs	r2, r7
 80065a8:	f7ff fb98 	bl	8005cdc <memcpy>
 80065ac:	4631      	mov	r1, r6
 80065ae:	4640      	mov	r0, r8
 80065b0:	f7ff fef8 	bl	80063a4 <_free_r>
 80065b4:	e7e1      	b.n	800657a <_realloc_r+0x1e>
 80065b6:	4635      	mov	r5, r6
 80065b8:	e7df      	b.n	800657a <_realloc_r+0x1e>
	...

080065bc <_sbrk_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	2300      	movs	r3, #0
 80065c0:	4d05      	ldr	r5, [pc, #20]	; (80065d8 <_sbrk_r+0x1c>)
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	f7fc fb40 	bl	8002c4c <_sbrk>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_sbrk_r+0x1a>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_sbrk_r+0x1a>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	20000a54 	.word	0x20000a54

080065dc <__malloc_lock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	; (80065e4 <__malloc_lock+0x8>)
 80065de:	f000 b811 	b.w	8006604 <__retarget_lock_acquire_recursive>
 80065e2:	bf00      	nop
 80065e4:	20000a58 	.word	0x20000a58

080065e8 <__malloc_unlock>:
 80065e8:	4801      	ldr	r0, [pc, #4]	; (80065f0 <__malloc_unlock+0x8>)
 80065ea:	f000 b80c 	b.w	8006606 <__retarget_lock_release_recursive>
 80065ee:	bf00      	nop
 80065f0:	20000a58 	.word	0x20000a58

080065f4 <_malloc_usable_size_r>:
 80065f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f8:	1f18      	subs	r0, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bfbc      	itt	lt
 80065fe:	580b      	ldrlt	r3, [r1, r0]
 8006600:	18c0      	addlt	r0, r0, r3
 8006602:	4770      	bx	lr

08006604 <__retarget_lock_acquire_recursive>:
 8006604:	4770      	bx	lr

08006606 <__retarget_lock_release_recursive>:
 8006606:	4770      	bx	lr

08006608 <_init>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr

08006614 <_fini>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr
